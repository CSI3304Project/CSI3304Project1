###############################################################################
#                                                                             #
# This test is aimed to focus on the properties and attributes of the         #
# LineString and MultiLineString class                                        #
#                                                                             #
# The LineString and MultiLineString class has a number of properties         #
# that are specific to a LineString and MultiLineString and certain           #
# properties that are common to all Geometry subclasses                       #
#                                                                             #
# Creation Date: 2013-8-16                                                    #
# Author : Tanjot Singh Uppal                                                 #
#                                                                             #
# Description:Test Cases of the LineString and MultiLineString class          #
# Properties                                                                  #
#                                                                             #
###############################################################################


--source include/force_myisam_default.inc
--source include/not_embedded.inc
--source include/have_geometry.inc

#Confirming the storage engine
--echo #Confirming the storage engine
SHOW VARIABLES LIKE '%engine%';

############################################################################################
# Creating the spatial objects                                                             #
############################################################################################

--echo #Creating the spatial Geometry object
USE test;

--disable_warnings
DROP TABLE IF EXISTS gis_line, gis_multi_line;
--enable_warnings

CREATE TABLE gis_line  (fid INTEGER NOT NULL PRIMARY KEY, g LINESTRING);
CREATE TABLE gis_multi_line (fid INTEGER NOT NULL PRIMARY KEY, g MULTILINESTRING);

############################################################################################
# Inserting the values specific to the spatial objects                                     #
############################################################################################

--echo #INSERT valid entries to LineString class
--disable_warnings
INSERT INTO gis_line VALUES
(201, LineFromText('LINESTRING(0 0,0 10,10 0)')),
(202, LineFromText('LINESTRING(0 0,0 0,0 0)')),
(203, LineFromText('LINESTRING(0 0.62,0.213 0,0 0)')),
(204, LineStringFromText('LINESTRING(10 10,10 10,10 10,10 10,10 10)')),
(205, LineStringFromText('LINESTRING(10 10,10 10,10 10,10 10,10 10)')),
(206, LineStringFromText('LINESTRING(10 10,20 10,20 20,10 20,10 10)')),
(207, LineStringFromWKB(AsWKB(LineString(Point(10, 10), Point(10, 10), Point(10, 10), Point(10, 10), Point(10, 10))))),
(208, LineStringFromWKB(AsWKB(LineString(Point(10, 10), Point(10, 10), Point(10, 10), Point(10, 10), Point(10, 10))))),
(209, LineStringFromWKB(AsWKB(LineString(Point(10, 10), Point(0, 10), Point(0, 10))))),
(210, LineStringFromWKB(AsWKB(LineString(Pointointoint(99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999, 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999)))));

--echo #INSERT invalid entries to LineString class
--error ER_GIS_INVALID_DATA
INSERT INTO gis_line VALUES
(211, LineFromText('LINESTRING(Ç Ç,Ç Ç,Ç Ç)')),
(212, LineFromText('LINESTRING(0 0,0 0,0 Ç)')),
(213, LineFromText('LINESTRING(0 0,0 0,0*0)')),
(214, LineStringFromText('LINESTRING(10 10,10 10,10 10,10 10,10*10)')),
(215, LineStringFromText('LINESTRING(10 10,10 10,10 10,10 10,10 Ç)')),
(216, LineStringFromText('LINESTRING(Ç Ç,Ç Ç,Ç Ç)')),
(217, LineStringFromWKB(AsWKB(LineString(Point(10, 'Ç'), Point(10, 10), Point(10, 10), Point(10, 10), Point(10, 10))))),
(218, LineStringFromWKB(AsWKB(LineString(Point(10, 10), Point(10, 10), Point(10, 10), Point(10, 10), Point(10, 10))))),
(219, LineStringFromWKB(AsWKB(LineString(Point('Ç', 'Ç'), Point('Ç', 'Ç'), Point('Ç', 'Ç'))))),
(220, LineStringFromWKB(AsWKB(LineString(Pointointoint(999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999, 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999))))),
(221, LineFromText('LINESTRING(Ç Ç)')),
(222, LineFromText('LINESTRING()')),
(223, LineFromText('LINESTRING(1 1,1)')),
(224, LineFromText('LINESTRING(-0)')),
(225, LineFromText('LINESTRING(1 1 1 1 1 1 1 1 1 1)')),
(226, LineStringFromText('LINESTRING(Ç Ç)')),
(227, LineStringFromText('LINESTRING(1 1 1 1 1 1 1 1)')),
(228, LineStringFromText('LINESTRING()')),
(229, LineStringFromText('LINESTRING(-0)')),
(230, LineStringFromText('LINESTRING(1 1,1)')),
(231, LineStringFromWKB(AsWKB(LineString(Point('Ç', 'Ç'))))),
(232, LineFromText('LINESTRING(NULL)')),
(233, LineStringFromText('LINESTRING(NULL)')),
(234, LineFromText('LINESTRING(1 .1)'));
--enable_warnings

--echo #Checking the integrity of the above insert statements 
select count(g) from gis_line;

select count(astext(g)) from gis_line;

select count(distinct(g)) from gis_line;

select count(distinct(astext(g))) from gis_line;


--echo #INSERT valid entries to multi_line class
--disable_warnings
--error ER_GIS_INVALID_DATA
INSERT INTO gis_multi_line VALUES
(501, MultiLineStringFromText('MULTILINESTRING((10 48,10 21,10 0),(16 0,16 23,16 48))')),
(502, MLineFromText('MULTILINESTRING((10 48,10 21,10 0))')),
(503, MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 2), Point(3, 5)), LineString(Point(2, 5), Point(5, 8), Point(21, 7)))))),
(504, MultiLineStringFromText('MULTILINESTRING((10 48,10 21,10 0),(16 0,16 23,16 48))')),
(505, MLineFromText('MULTILINESTRING((10 48,10 21,10 0))')),
(506, MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 2), Point(3, 5)), LineString(Point(2, 5), Point(5, 8), Point(21, 7)))))),
(507, MultiLineStringFromText('MULTILINESTRING((10 48,10 21,10 0),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48))')),
(508, MLineFromText('MULTILINESTRING((10 48,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4))')),
(509, MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 2), Point(3, 5)), LineString(Point(2, 5), Point(5, 8), Point(21, 7)), LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)))))),
(510, MultiLineStringFromText('MULTILINESTRING((0 0,0 0,0 0),(0 0,0 0,0 0))')),
(511, MLineFromText('MULTILINESTRING((0 0,0 0,0 0))')),
(512, MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(0, 0)), LineString(Point(0, 0), Point(0, -0), Point(0, 0)))))),
(513, MultiLineStringFromText
(514, MLineFromText('MULTILINESTRING((999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999))')),
(515, MLineFromWKB(AsWKB(MultiLineString(LineString(PointointineString(Pointointoint(999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999, 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999))))));

--echo #INSERT invalid entries to multi_line class
--error ER_GIS_INVALID_DATA
INSERT INTO gis_multi_line VALUES
(516, MultiLineStringFromText('MULTILINESTRING((ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ),(ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ))')),
(517, MLineFromText('MULTILINESTRING((ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ))')),
(518, MLineFromWKB(AsWKB(MultiLineString(LineString(Point('ëô', 'ôÑ'), Point('ëô', 'ôÑ')), LineString(Point('ëô', 'ôÑ'), Point('ëô', 'ôÑ'), Point('ëô', 'ôÑ')))))),
(519, MultiLineStringFromText('MULTILINESTRING((0 0,1 1,2 2,3 3,7 ôÑ),(0 0,5 1,2 2,3 3,7 ôÑ))')),
(520, MLineFromText('MULTILINESTRING((0 0,1 1,2 2,3 3,7 -ô))')),
(521, MLineFromWKB(AsWKB(MultiLineString(LineString(Point(3, 'Ñ'), Point(4, 4)), LineString(Point(8, 0), Point(9, -0), Point(5, -7)))))),
(522, MultiLineStringFromText('MULTILINESTRING((2 2 2 2 2 2 2 2 2),(8 8 8 8 8 8 8))')),
(523, MLineFromText('MULTILINESTRING((7 7 7 7 7 7 7))')),
(525, MultiLineStringFromText('MULTILINESTRING((),())')),
(526, MLineFromText('MULTILINESTRING(())')),
(528, MultiLineStringFromText('MULTILINESTRING((a -o),(0 -p))')),
(529, MLineFromText('MULTILINESTRING((-m))')),
(531, MultiLineStringFromText('MULTILINESTRING((-0),(-0))')),
(532, MLineFromText('MULTILINESTRING((-0))')),
(533, MLineFromWKB('AsWKB(MultiLineString(LineString(Point(-0), Point(-0)), LineString(Point(-0), Point(-0), Point(-0))))')),
(534, MultiLineStringFromText('MULTILINESTRING((NULL),(NULL))')),
(535, MLineFromText('MULTILINESTRING((NULL))')),
(537, MLineFromWKB(AsWKB(MultiLineString(LineString(Point('NULL', '/8*7-9%4')))))),
(538, MLineFromWKB(AsWKB(MultiLineString(LineString(Point('NULL', '8*7-9%4ab*rt&gh#rtg')))))),
(539, MLineFromWKB(AsWKB(MultiLineString(LineString(Point('NULL', '88.999999999999999')))))),
(540, MLineFromWKB(AsWKB(MultiLineString(LineString(Point('NULL', '88.999999999999999999999999999999999999999999999999'))))));
--enable_warnings

--echo #Checking the integrity of the above insert statements 
select count(g) from gis_multi_line;

select count(astext(g)) from gis_multi_line;

select count(distinct(g)) from gis_multi_line;

select count(distinct(astext(g))) from gis_multi_line;


############################################################################################
# Displaying the spatial data from all the spatial objects created                         #
############################################################################################

--echo #Displaying the inserted spatial Data
Select fid, AsText(g) from gis_line;
Select fid, AsText(g) from gis_multi_line;

############################################################################################
# Checking the geometry types for the line and multiLine class                             #
############################################################################################

--echo #Checking the geometry types for the line and multiLine class 
select fid,GeometryType(g) from gis_line where g is not NULL;
select count(GeometryType(g)) FROM gis_line;


select fid,GeometryType(g) from gis_multi_line where g is not NULL;
select count(GeometryType(g)) FROM gis_multi_line;


--echo #Checking the geometry types of some random Lines and MultiLines.
Select GeometryType(LineFromText('LINESTRING(0 0,1 0,2 0)'));

Select GeometryType(LineStringFromText('LINESTRING(0 0,1 0,2 0)'));

Select GeometryType(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))));

Select GeometryType(MLineFromText('MULTILINESTRING((0 0,1 0,2 0))'));

Select GeometryType(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0),(2 0,1 0,0 0))'));

Select GeometryType(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0))))));


--echo #WKB data, little-endian format
select GeometryType(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040));

select GeometryType(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF));

select GeometryType(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445));

select GeometryType(MLineFromWKB(0x01050000000100000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040));

select GeometryType(MLineFromWKB(0x01050000000200000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001020000000200000014AE47E17A14F2BF14AE47E17A14F23F19AA622AFD84BFBF19AA622AFD84BF3F));

select GeometryType(MLineFromWKB(0x01050000000300000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001020000000200000014AE47E17A14F2BF14AE47E17A14F23F19AA622AFD84BFBF19AA622AFD84BF3F0102000000020000005510F2A07CE90C440080E03779C341430000000084D79741003D9160E458F1C3));


--echo #WKB data, big-endian format
select GeometryType(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000));

select GeometryType(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000));

select GeometryType(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C));

select GeometryType(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000));

select GeometryType(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C37937E08000));

select GeometryType(MLineFromWKB(0x0000000005000000020000000002000000035FB317E5EF3AB327E3A4B378469B67320000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C37937E08000));


Select GeometryType(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'));

Select GeometryType(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'));

Select GeometryType(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))));

Select GeometryType(MLineFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2))'));

Select GeometryType(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2),(0 -2,2 1,2 0, 1 0, 0 0))'));

Select GeometryType(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2))))));


Select GeometryType(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'));

Select GeometryType(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'));

Select GeometryType(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2), Point(5, 1), Point(1, -5)))));

Select GeometryType(MLineFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))'));

Select GeometryType(MultiLineStringFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5),(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))'));

Select GeometryType(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2) ), LineString(Point(10, -2), Point(5, 1), Point(1, -5))))));


--error ER_GIS_INVALID_DATA
Select GeometryType(LineFromText('LINESTRING(.1 b, a -0, -0 ë)'));

--error ER_GIS_INVALID_DATA
Select GeometryType(LineStringFromText('LINESTRING(.1 b, a -0, -0 ë)'));

--disable_Warnings
Select GeometryType(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')))));

--enable_warnings
--error ER_GIS_INVALID_DATA
Select GeometryType(MLineFromText('MULTILINESTRING((.1 b, a -0, -0 ë))'));

--error ER_GIS_INVALID_DATA
Select GeometryType(MultiLineStringFromText('MULTILINESTRING((.1 b, a -0, -0 ë),(.1 b, a -0, -0 ë))'));

--disable_warnings
Select GeometryType(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')), LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))));

--enable_warnings

Select GeometryType(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'));

Select GeometryType(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'));

Select GeometryType(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))));

Select GeometryType(MLineFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'));

Select GeometryType(MultiLineStringFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000),(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'));

Select GeometryType(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')), LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000'))))));


### The below section is commented till the BUG@17167633 is fixed
#Select GeometryType(LineFromText('LINESTRING(.1 0, 1 1, 2 2)'));
#
#Select GeometryType(LineStringFromText('LINESTRING(.1 0, 1 1, 2 2)'));
#
--disable_warnings
Select GeometryType(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')))));

--enable_warnings
#Select GeometryType(MLineFromText('MULTILINESTRING((.1 0, 1 1, 2 2))'));
#
#Select GeometryType(MultiLineStringFromText('MULTILINESTRING((.1 0, 1 1, 2 2),(.1 0, 1 1, 2 2))'));
#
--disable_warnings
Select GeometryType(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')), LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2'))))));

--enable_warnings

--error ER_GIS_INVALID_DATA
Select GeometryType(LineFromText('LINESTRING(. ., 1 ~, ^ -000011111)'));

--error ER_GIS_INVALID_DATA
Select GeometryType(LineStringFromText('LINESTRING(. ., 1 ~, ^ -000011111)'));

--disable_warnings
Select GeometryType(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')))));

--enable_warnings
--error ER_GIS_INVALID_DATA
Select GeometryType(MLineFromText('MULTILINESTRING((. ., 1 ~, ^ -000011111))'));

--error ER_GIS_INVALID_DATA
Select GeometryType(MultiLineStringFromText('MULTILINESTRING((. ., 1 ~, ^ -000011111),(. ., 1 ~, ^ -000011111))'));

--disable_warnings
Select GeometryType(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')), LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111'))))));

--enable_warnings

--echo #Invalid WKB data
--error ER_GIS_DATA_WRONG_ENDIANESS
select GeometryType(0x01010000000200000000000000000000000000000000002440000000000000F03F0000000000000040);
--error ER_GIS_DATA_WRONG_ENDIANESS
select GeometryType(0x000000000400000002000000000000000040240000000000003FF00000000000004000000000000000);
--error ER_GIS_DATA_WRONG_ENDIANESS
select GeometryType(0x01020000000100000001020000000200000000000000000000000000000000002440000000000000F0BFD7A3703D0AD70140);
--error ER_GIS_DATA_WRONG_ENDIANESS
select GeometryType(0x00000000060000000100000000020000000200000000000000004024000000000000BFF00000000000004001D70A3D70A3D7);

############################################################################################
# Checking the SRID for the line and multiLine class                                       #
############################################################################################

--echo #Checking the SRID for the line and multiLine class 
select fid,SRID(g) from gis_line where g is not NULL;
select count(SRID(g)) FROM gis_line;


select fid,SRID(g) from gis_multi_line where g is not NULL;
select count(SRID(g)) FROM gis_multi_line;


--echo #Checking the SRID of some random Lines and MultiLines.
Select SRID(LineFromText('LINESTRING(0 0,1 0,2 0)'));

Select SRID(LineStringFromText('LINESTRING(0 0,1 0,2 0)'));

Select SRID(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))));

Select SRID(MLineFromText('MULTILINESTRING((0 0,1 0,2 0))'));

Select SRID(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0),(2 0,1 0,0 0))'));

Select SRID(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0))))));


--echo #WKB data, little-endian format
select SRID(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040));

select SRID(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF));

select SRID(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445));

select SRID(MLineFromWKB(0x01050000000100000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040));

select SRID(MLineFromWKB(0x01050000000200000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001020000000200000014AE47E17A14F2BF14AE47E17A14F23F19AA622AFD84BFBF19AA622AFD84BF3F));

select SRID(MLineFromWKB(0x01050000000300000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001020000000200000014AE47E17A14F2BF14AE47E17A14F23F19AA622AFD84BFBF19AA622AFD84BF3F0102000000020000005510F2A07CE90C440080E03779C341430000000084D79741003D9160E458F1C3));


--echo #WKB data, big-endian format
select SRID(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000));

select SRID(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000));

select SRID(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C));

select SRID(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000));

select SRID(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C37937E08000));

select SRID(MLineFromWKB(0x0000000005000000020000000002000000035FB317E5EF3AB327E3A4B378469B67320000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C37937E08000));


Select SRID(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'));

Select SRID(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'));

Select SRID(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))));

Select SRID(MLineFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2))'));

Select SRID(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2),(0 -2,2 1,2 0, 1 0, 0 0))'));

Select SRID(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2))))));


Select SRID(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'));

Select SRID(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'));

Select SRID(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2), Point(5, 1), Point(1, -5)))));

Select SRID(MLineFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))'));

Select SRID(MultiLineStringFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5),(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))'));

Select SRID(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2) ), LineString(Point(10, -2), Point(5, 1), Point(1, -5))))));


--error ER_GIS_INVALID_DATA
Select SRID(LineFromText('LINESTRING(.1 b, a -0, -0 ë)'));

--error ER_GIS_INVALID_DATA
Select SRID(LineStringFromText('LINESTRING(.1 b, a -0, -0 ë)'));

--disable_Warnings
Select SRID(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')))));

--enable_warnings
--error ER_GIS_INVALID_DATA
Select SRID(MLineFromText('MULTILINESTRING((.1 b, a -0, -0 ë))'));

--error ER_GIS_INVALID_DATA
Select SRID(MultiLineStringFromText('MULTILINESTRING((.1 b, a -0, -0 ë),(.1 b, a -0, -0 ë))'));

--disable_warnings
Select SRID(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')), LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))));

--enable_warnings

Select SRID(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'));

Select SRID(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'));

Select SRID(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))));

Select SRID(MLineFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'));

Select SRID(MultiLineStringFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000),(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'));

Select SRID(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')), LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000'))))));


### The below section is commented till the BUG@17167633 is fixed
#Select SRID(LineFromText('LINESTRING(.1 0, 1 1, 2 2)'));
#
#Select SRID(LineStringFromText('LINESTRING(.1 0, 1 1, 2 2)'));
#
--disable_warnings
Select SRID(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')))));

--enable_warnings
#Select SRID(MLineFromText('MULTILINESTRING((.1 0, 1 1, 2 2))'));
#
#Select SRID(MultiLineStringFromText('MULTILINESTRING((.1 0, 1 1, 2 2),(.1 0, 1 1, 2 2))'));
#
--disable_warnings
Select SRID(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')), LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2'))))));

--enable_warnings

--error ER_GIS_INVALID_DATA
Select SRID(LineFromText('LINESTRING(. ., 1 ~, ^ -000011111)'));

--error ER_GIS_INVALID_DATA
Select SRID(LineStringFromText('LINESTRING(. ., 1 ~, ^ -000011111)'));

--disable_warnings
Select SRID(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')))));

--enable_warnings
--error ER_GIS_INVALID_DATA
Select SRID(MLineFromText('MULTILINESTRING((. ., 1 ~, ^ -000011111))'));

--error ER_GIS_INVALID_DATA
Select SRID(MultiLineStringFromText('MULTILINESTRING((. ., 1 ~, ^ -000011111),(. ., 1 ~, ^ -000011111))'));

--disable_warnings
Select SRID(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')), LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111'))))));

--enable_warnings

Select SRID(LineFromText('LINESTRING(0 0,1 0,2 0)',0));

Select SRID(LineStringFromText('LINESTRING(0 0,1 0,2 0)',1000));

select SRID(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040,2000000));

select SRID(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C,123456789));

Select SRID(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0))),4294967295));

Select SRID(MLineFromText('MULTILINESTRING((0 0,1 0,2 0))',0));

select SRID(MLineFromWKB(0x01050000000200000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001020000000200000014AE47E17A14F2BF14AE47E17A14F23F19AA622AFD84BFBF19AA622AFD84BF3F,1000));

select SRID(MLineFromWKB(0x0000000005000000020000000002000000035FB317E5EF3AB327E3A4B378469B67320000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C37937E08000,123456789));

Select SRID(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0),(2 0,1 0,0 0))',1048000000));

Select SRID(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0)))),4294967295));


Select SRID(LineFromText('LINESTRING(0 0,1 0,2 0)',-1));

select SRID(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040,-1024));

select SRID(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C,4294967296));

Select SRID(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0))),429496729500));

Select SRID(LineStringFromText('LINESTRING(0 0,1 0,2 0)',42949672956789));

Select SRID(MLineFromText('MULTILINESTRING((0 0,1 0,2 0))',-1));

select SRID(MLineFromWKB(0x01050000000200000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001020000000200000014AE47E17A14F2BF14AE47E17A14F23F19AA622AFD84BFBF19AA622AFD84BF3F,-1024));

select SRID(MLineFromWKB(0x0000000005000000020000000002000000035FB317E5EF3AB327E3A4B378469B67320000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C37937E08000,4294967296));

Select SRID(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0),(2 0,1 0,0 0))',1000000000000));


--echo #Invalid WKB data
--error ER_GIS_DATA_WRONG_ENDIANESS
select SRID(0x01010000000200000000000000000000000000000000002440000000000000F03F0000000000000040);
--error ER_GIS_DATA_WRONG_ENDIANESS
select SRID(0x000000000400000002000000000000000040240000000000003FF00000000000004000000000000000);
--error ER_GIS_DATA_WRONG_ENDIANESS
select SRID(0x01020000000100000001020000000200000000000000000000000000000000002440000000000000F0BFD7A3703D0AD70140);
--error ER_GIS_DATA_WRONG_ENDIANESS
select SRID(0x00000000060000000100000000020000000200000000000000004024000000000000BFF00000000000004001D70A3D70A3D7);

############################################################################################
# Checking the Dimension for the line and multiLine class                                  #
############################################################################################

--echo #Checking the Dimension for the line and multiLine class 
select fid,Dimension(g) from gis_line where g is not NULL;
select count(Dimension(g)) FROM gis_line;


select fid,Dimension(g) from gis_multi_line where g is not NULL;
select count(Dimension(g)) FROM gis_multi_line;


--echo #Checking the Dimension of some random Lines and MultiLines.
Select Dimension(LineFromText('LINESTRING(0 0,1 0,2 0)'));

Select Dimension(LineStringFromText('LINESTRING(0 0,1 0,2 0)'));

Select Dimension(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))));

Select Dimension(MLineFromText('MULTILINESTRING((0 0,1 0,2 0))'));

Select Dimension(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0),(2 0,1 0,0 0))'));

Select Dimension(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0))))));


--echo #WKB data, little-endian format
select Dimension(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040));

select Dimension(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF));

select Dimension(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445));

select Dimension(MLineFromWKB(0x01050000000100000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040));

select Dimension(MLineFromWKB(0x01050000000200000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001020000000200000014AE47E17A14F2BF14AE47E17A14F23F19AA622AFD84BFBF19AA622AFD84BF3F));

select Dimension(MLineFromWKB(0x01050000000300000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001020000000200000014AE47E17A14F2BF14AE47E17A14F23F19AA622AFD84BFBF19AA622AFD84BF3F0102000000020000005510F2A07CE90C440080E03779C341430000000084D79741003D9160E458F1C3));


--echo #WKB data, big-endian format
select Dimension(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000));

select Dimension(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000));

select Dimension(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C));

select Dimension(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000));

select Dimension(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C37937E08000));

select Dimension(MLineFromWKB(0x0000000005000000020000000002000000035FB317E5EF3AB327E3A4B378469B67320000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C37937E08000));


Select Dimension(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'));

Select Dimension(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'));

Select Dimension(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))));

Select Dimension(MLineFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2))'));

Select Dimension(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2),(0 -2,2 1,2 0, 1 0, 0 0))'));

Select Dimension(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2))))));


Select Dimension(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'));

Select Dimension(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'));

Select Dimension(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2), Point(5, 1), Point(1, -5)))));

Select Dimension(MLineFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))'));

Select Dimension(MultiLineStringFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5),(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))'));

Select Dimension(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2) ), LineString(Point(10, -2), Point(5, 1), Point(1, -5))))));


--error ER_GIS_INVALID_DATA
Select Dimension(LineFromText('LINESTRING(.1 b, a -0, -0 ë)'));

--error ER_GIS_INVALID_DATA
Select Dimension(LineStringFromText('LINESTRING(.1 b, a -0, -0 ë)'));

--disable_Warnings
Select Dimension(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')))));

--enable_warnings
--error ER_GIS_INVALID_DATA
Select Dimension(MLineFromText('MULTILINESTRING((.1 b, a -0, -0 ë))'));

--error ER_GIS_INVALID_DATA
Select Dimension(MultiLineStringFromText('MULTILINESTRING((.1 b, a -0, -0 ë),(.1 b, a -0, -0 ë))'));

--disable_warnings
Select Dimension(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')), LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))));

--enable_warnings

Select Dimension(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'));

Select Dimension(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'));

Select Dimension(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))));

Select Dimension(MLineFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'));

Select Dimension(MultiLineStringFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000),(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'));

Select Dimension(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')), LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000'))))));


### The below section is commented till the BUG@17167633 is fixed
#Select Dimension(LineFromText('LINESTRING(.1 0, 1 1, 2 2)'));
#
#Select Dimension(LineStringFromText('LINESTRING(.1 0, 1 1, 2 2)'));
#
--disable_warnings
Select Dimension(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')))));

--enable_warnings
#Select Dimension(MLineFromText('MULTILINESTRING((.1 0, 1 1, 2 2))'));
#
#Select Dimension(MultiLineStringFromText('MULTILINESTRING((.1 0, 1 1, 2 2),(.1 0, 1 1, 2 2))'));
#
--disable_warnings
Select Dimension(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')), LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2'))))));

--enable_warnings

--error ER_GIS_INVALID_DATA
Select Dimension(LineFromText('LINESTRING(. ., 1 ~, ^ -000011111)'));

--error ER_GIS_INVALID_DATA
Select Dimension(LineStringFromText('LINESTRING(. ., 1 ~, ^ -000011111)'));

--disable_warnings
Select Dimension(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')))));

--enable_warnings
--error ER_GIS_INVALID_DATA
Select Dimension(MLineFromText('MULTILINESTRING((. ., 1 ~, ^ -000011111))'));

--error ER_GIS_INVALID_DATA
Select Dimension(MultiLineStringFromText('MULTILINESTRING((. ., 1 ~, ^ -000011111),(. ., 1 ~, ^ -000011111))'));

--disable_warnings
Select Dimension(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')), LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111'))))));

--enable_warnings

--echo #Invalid WKB data
--error ER_GIS_DATA_WRONG_ENDIANESS
select Dimension(0x01010000000200000000000000000000000000000000002440000000000000F03F0000000000000040);
--error ER_GIS_DATA_WRONG_ENDIANESS
select Dimension(0x000000000400000002000000000000000040240000000000003FF00000000000004000000000000000);
--error ER_GIS_DATA_WRONG_ENDIANESS
select Dimension(0x01020000000100000001020000000200000000000000000000000000000000002440000000000000F0BFD7A3703D0AD70140);
--error ER_GIS_DATA_WRONG_ENDIANESS
select Dimension(0x00000000060000000100000000020000000200000000000000004024000000000000BFF00000000000004001D70A3D70A3D7);

############################################################################################
# Checking the Envelope function for all the spatial objects                               #
############################################################################################

--echo #Checking the Envelope for the line and multiLine class 
select fid,AsText(Envelope(g)) from gis_line where g is not NULL;
select count(Envelope(g)) FROM gis_line;


select fid,AsText(Envelope(g)) from gis_multi_line where g is not NULL;
select count(Envelope(g)) FROM gis_multi_line;


--echo #Checking the Envelope of some random Lines and MultiLines.
Select AsText(Envelope(LineFromText('LINESTRING(0 0,1 0,2 0)')));

Select AsText(Envelope(LineStringFromText('LINESTRING(0 0,1 0,2 0)')));

Select AsText(Envelope(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0))))));

Select AsText(Envelope(MLineFromText('MULTILINESTRING((0 0,1 0,2 0))')));

Select AsText(Envelope(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0),(2 0,1 0,0 0))')));

Select AsText(Envelope(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0)))))));


--echo #WKB data, little-endian format
select AsText(Envelope(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040)));

select AsText(Envelope(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF)));

select AsText(Envelope(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445)));

select AsText(Envelope(MLineFromWKB(0x01050000000100000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040)));

select AsText(Envelope(MLineFromWKB(0x01050000000200000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001020000000200000014AE47E17A14F2BF14AE47E17A14F23F19AA622AFD84BFBF19AA622AFD84BF3F)));

select AsText(Envelope(MLineFromWKB(0x01050000000300000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001020000000200000014AE47E17A14F2BF14AE47E17A14F23F19AA622AFD84BFBF19AA622AFD84BF3F0102000000020000005510F2A07CE90C440080E03779C341430000000084D79741003D9160E458F1C3)));


--echo #WKB data, big-endian format
select AsText(Envelope(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000)));

select AsText(Envelope(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000)));

select AsText(Envelope(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C)));

select AsText(Envelope(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000)));

select AsText(Envelope(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C37937E08000)));

select AsText(Envelope(MLineFromWKB(0x0000000005000000020000000002000000035FB317E5EF3AB327E3A4B378469B67320000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C37937E08000)));


Select AsText(Envelope(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)')));

Select AsText(Envelope(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)')));

Select AsText(Envelope(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0), point(2, 1), point(0, -2))))));

Select AsText(Envelope(MLineFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2))')));

Select AsText(Envelope(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2),(0 -2,2 1,2 0, 1 0, 0 0))')));

Select AsText(Envelope(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2)))))));


Select AsText(Envelope(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)')));

Select AsText(Envelope(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)')));

Select AsText(Envelope(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2), Point(5, 1), Point(1, -5))))));

Select AsText(Envelope(MLineFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))')));

Select AsText(Envelope(MultiLineStringFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5),(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))')));

Select AsText(Envelope(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2) ), LineString(Point(10, -2), Point(5, 1), Point(1, -5)))))));


--error ER_GIS_INVALID_DATA
Select AsText(Envelope(LineFromText('LINESTRING(.1 b, a -0, -0 ë)')));

--error ER_GIS_INVALID_DATA
Select AsText(Envelope(LineStringFromText('LINESTRING(.1 b, a -0, -0 ë)')));

--disable_Warnings
Select AsText(Envelope(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))));

--enable_warnings
--error ER_GIS_INVALID_DATA
Select AsText(Envelope(MLineFromText('MULTILINESTRING((.1 b, a -0, -0 ë))')));

--error ER_GIS_INVALID_DATA
Select AsText(Envelope(MultiLineStringFromText('MULTILINESTRING((.1 b, a -0, -0 ë),(.1 b, a -0, -0 ë))')));

--disable_warnings
Select AsText(Envelope(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')), LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')))))));

--enable_warnings

Select AsText(Envelope(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)')));

Select AsText(Envelope(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)')));

Select AsText(Envelope(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000'))))));

Select AsText(Envelope(MLineFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))')));

Select AsText(Envelope(MultiLineStringFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000),(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))')));

Select AsText(Envelope(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')), LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))))));


### The below section is commented till the BUG@17167633 is fixed
#Select AsText(Envelope(LineFromText('LINESTRING(.1 0, 1 1, 2 2)')));
#
#Select AsText(Envelope(LineStringFromText('LINESTRING(.1 0, 1 1, 2 2)')));
#
--disable_warnings
Select AsText(Envelope(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2'))))));

--enable_warnings
#Select AsText(Envelope(MLineFromText('MULTILINESTRING((.1 0, 1 1, 2 2))')));
#
#Select AsText(Envelope(MultiLineStringFromText('MULTILINESTRING((.1 0, 1 1, 2 2),(.1 0, 1 1, 2 2))')));
#
--disable_warnings
Select AsText(Envelope(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')), LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')))))));

--enable_warnings

--error ER_GIS_INVALID_DATA
Select AsText(Envelope(LineFromText('LINESTRING(. ., 1 ~, ^ -000011111)')));

--error ER_GIS_INVALID_DATA
Select AsText(Envelope(LineStringFromText('LINESTRING(. ., 1 ~, ^ -000011111)')));

--disable_warnings
Select AsText(Envelope(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111'))))));

--enable_warnings
--error ER_GIS_INVALID_DATA
Select AsText(Envelope(MLineFromText('MULTILINESTRING((. ., 1 ~, ^ -000011111))')));

--error ER_GIS_INVALID_DATA
Select AsText(Envelope(MultiLineStringFromText('MULTILINESTRING((. ., 1 ~, ^ -000011111),(. ., 1 ~, ^ -000011111))')));

--disable_warnings
Select AsText(Envelope(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')), LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')))))));

--enable_warnings

--echo #Invalid WKB data
--error ER_GIS_DATA_WRONG_ENDIANESS
select AsText(Envelope(0x01010000000200000000000000000000000000000000002440000000000000F03F0000000000000040));
--error ER_GIS_DATA_WRONG_ENDIANESS
select AsText(Envelope(0x000000000400000002000000000000000040240000000000003FF00000000000004000000000000000));
--error ER_GIS_DATA_WRONG_ENDIANESS
select AsText(Envelope(0x01020000000100000001020000000200000000000000000000000000000000002440000000000000F0BFD7A3703D0AD70140));
--error ER_GIS_DATA_WRONG_ENDIANESS
select AsText(Envelope(0x00000000060000000100000000020000000200000000000000004024000000000000BFF00000000000004001D70A3D70A3D7));

############################################################################################
# Checking if the geometries are simple or not                                             #
############################################################################################

--echo #Checking the IsSimple for the line and multiLine class 
select fid,IsSimple(g) from gis_line where g is not NULL;
select count(IsSimple(g)) FROM gis_line;


select fid,IsSimple(g) from gis_multi_line where g is not NULL;
select count(IsSimple(g)) FROM gis_multi_line;


--echo #Checking the IsSimple of some random Lines and MultiLines.
Select IsSimple(LineFromText('LINESTRING(0 0,1 0,2 0)'));

Select IsSimple(LineStringFromText('LINESTRING(0 0,1 0,2 0)'));

Select IsSimple(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))));

Select IsSimple(MLineFromText('MULTILINESTRING((0 0,1 0,2 0))'));

Select IsSimple(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0),(2 0,1 0,0 0))'));

Select IsSimple(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0))))));


--echo #WKB data, little-endian format
select IsSimple(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040));

select IsSimple(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF));

select IsSimple(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445));

select IsSimple(MLineFromWKB(0x01050000000100000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040));

select IsSimple(MLineFromWKB(0x01050000000200000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001020000000200000014AE47E17A14F2BF14AE47E17A14F23F19AA622AFD84BFBF19AA622AFD84BF3F));

select IsSimple(MLineFromWKB(0x01050000000300000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001020000000200000014AE47E17A14F2BF14AE47E17A14F23F19AA622AFD84BFBF19AA622AFD84BF3F0102000000020000005510F2A07CE90C440080E03779C341430000000084D79741003D9160E458F1C3));


--echo #WKB data, big-endian format
select IsSimple(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000));

select IsSimple(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000));

select IsSimple(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C));

select IsSimple(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000));

select IsSimple(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C37937E08000));

select IsSimple(MLineFromWKB(0x0000000005000000020000000002000000035FB317E5EF3AB327E3A4B378469B67320000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C37937E08000));


### The below section is commented till the BUG@17507827 is fixed
#Select IsSimple(LineStringFromText('LINESTRING(0 0,1 0,2 0,2 0,2 0,2 1,1.5 0)')) as Result;
#
Select IsSimple(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'));

Select IsSimple(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'));

Select IsSimple(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))));

Select IsSimple(MLineFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2))'));

Select IsSimple(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2),(0 -2,2 1,2 0, 1 0, 0 0))'));

Select IsSimple(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2))))));

#Select IsSimple(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0),(2 0,2 1,1.5 0,1.5 1,1 0))'));
#

Select IsSimple(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'));

Select IsSimple(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'));

Select IsSimple(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2), Point(5, 1), Point(1, -5)))));

Select IsSimple(MLineFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))'));

Select IsSimple(MultiLineStringFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5),(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))'));

Select IsSimple(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2) ), LineString(Point(10, -2), Point(5, 1), Point(1, -5))))));


--error ER_GIS_INVALID_DATA
Select IsSimple(LineFromText('LINESTRING(.1 b, a -0, -0 ë)'));

--error ER_GIS_INVALID_DATA
Select IsSimple(LineStringFromText('LINESTRING(.1 b, a -0, -0 ë)'));

--disable_Warnings
Select IsSimple(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')))));

--enable_warnings
--error ER_GIS_INVALID_DATA
Select IsSimple(MLineFromText('MULTILINESTRING((.1 b, a -0, -0 ë))'));

--error ER_GIS_INVALID_DATA
Select IsSimple(MultiLineStringFromText('MULTILINESTRING((.1 b, a -0, -0 ë),(.1 b, a -0, -0 ë))'));

--disable_warnings
Select IsSimple(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')), LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))));

--enable_warnings

Select IsSimple(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'));

Select IsSimple(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'));

Select IsSimple(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))));

Select IsSimple(MLineFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'));

Select IsSimple(MultiLineStringFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000),(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'));

Select IsSimple(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')), LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000'))))));


### The below section is commented till the BUG@17167633 is fixed
#Select IsSimple(LineFromText('LINESTRING(.1 0, 1 1, 2 2)'));
#
#Select IsSimple(LineStringFromText('LINESTRING(.1 0, 1 1, 2 2)'));
#
--disable_warnings
Select IsSimple(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')))));

--enable_warnings
#Select IsSimple(MLineFromText('MULTILINESTRING((.1 0, 1 1, 2 2))'));
#
#Select IsSimple(MultiLineStringFromText('MULTILINESTRING((.1 0, 1 1, 2 2),(.1 0, 1 1, 2 2))'));
#
--disable_warnings
Select IsSimple(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')), LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2'))))));

--enable_warnings

--error ER_GIS_INVALID_DATA
Select IsSimple(LineFromText('LINESTRING(. ., 1 ~, ^ -000011111)'));

--error ER_GIS_INVALID_DATA
Select IsSimple(LineStringFromText('LINESTRING(. ., 1 ~, ^ -000011111)'));

--disable_warnings
Select IsSimple(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')))));

--enable_warnings
--error ER_GIS_INVALID_DATA
Select IsSimple(MLineFromText('MULTILINESTRING((. ., 1 ~, ^ -000011111))'));

--error ER_GIS_INVALID_DATA
Select IsSimple(MultiLineStringFromText('MULTILINESTRING((. ., 1 ~, ^ -000011111),(. ., 1 ~, ^ -000011111))'));

--disable_warnings
Select IsSimple(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')), LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111'))))));

--enable_warnings

--echo #Invalid WKB data
--error ER_GIS_DATA_WRONG_ENDIANESS
select IsSimple(0x01010000000200000000000000000000000000000000002440000000000000F03F0000000000000040);
--error ER_GIS_DATA_WRONG_ENDIANESS
select IsSimple(0x000000000400000002000000000000000040240000000000003FF00000000000004000000000000000);
--error ER_GIS_DATA_WRONG_ENDIANESS
select IsSimple(0x01020000000100000001020000000200000000000000000000000000000000002440000000000000F0BFD7A3703D0AD70140);
--error ER_GIS_DATA_WRONG_ENDIANESS
select IsSimple(0x00000000060000000100000000020000000200000000000000004024000000000000BFF00000000000004001D70A3D70A3D7);

############################################################################################
# Checking if the geometries (LineString and MultiLineString) are Closed or not            #
############################################################################################

--echo #Checking the IsClosed for the line and multiLine class 
select fid,IsClosed(g) from gis_line where g is not NULL;
select count(IsClosed(g)) FROM gis_line;


select fid,IsClosed(g) from gis_multi_line where g is not NULL;
select count(IsClosed(g)) FROM gis_multi_line;


--echo #Checking the IsClosed of some random Lines and MultiLines.
Select IsClosed(LineFromText('LINESTRING(0 0,1 0,2 0)'));

Select IsClosed(LineStringFromText('LINESTRING(0 0,1 0,2 0)'));

Select IsClosed(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))));

Select IsClosed(MLineFromText('MULTILINESTRING((0 0,1 0,2 0))'));

Select IsClosed(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0),(2 0,1 0,0 0))'));

Select IsClosed(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0))))));


--echo #WKB data, little-endian format
select IsClosed(LineFromWKB(0x01020000000700000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004000000000000000000000000000000000));

select IsClosed(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF));

select IsClosed(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445));

select IsClosed(MLineFromWKB(0x01050000000100000001020000000700000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004000000000000000000000000000000000));

select IsClosed(MLineFromWKB(0x01050000000200000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001020000000200000014AE47E17A14F2BF14AE47E17A14F23F19AA622AFD84BFBF19AA622AFD84BF3F));

select IsClosed(MLineFromWKB(0x01050000000300000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001020000000200000014AE47E17A14F2BF14AE47E17A14F23F19AA622AFD84BFBF19AA622AFD84BF3F0102000000020000005510F2A07CE90C440080E03779C341430000000084D79741003D9160E458F1C3));


--echo #WKB data, big-endian format
select IsClosed(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000));

select IsClosed(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000));

select IsClosed(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C));

select IsClosed(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000));

select IsClosed(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C37937E08000));

select IsClosed(MLineFromWKB(0x0000000005000000020000000002000000035FB317E5EF3AB327E3A4B378469B67320000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C37937E08000));


Select IsClosed(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'));

Select IsClosed(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'));

Select IsClosed(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))));

Select IsClosed(MLineFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2))'));

Select IsClosed(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2),(0 -2,2 1,2 0, 1 0, 0 0))'));

Select IsClosed(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2))))));


Select IsClosed(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 0)'));

Select IsClosed(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 0)'));

Select IsClosed(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, 0)))));

Select IsClosed(MLineFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 0))'));

Select IsClosed(MultiLineStringFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 0),(0 0, 10 0, 1 -1, 10 -1, 0 0))'));

Select IsClosed(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, 0) ), LineString(Point(10, -2), Point(5, 1), Point(10, -2))))));


--error ER_GIS_INVALID_DATA
Select IsClosed(LineFromText('LINESTRING(.1 b, a -0, -0 ë)'));

--error ER_GIS_INVALID_DATA
Select IsClosed(LineStringFromText('LINESTRING(.1 b, a -0, -0 ë)'));

--disable_Warnings
Select IsClosed(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')))));

--enable_warnings
--error ER_GIS_INVALID_DATA
Select IsClosed(MLineFromText('MULTILINESTRING((.1 b, a -0, -0 ë))'));

--error ER_GIS_INVALID_DATA
Select IsClosed(MultiLineStringFromText('MULTILINESTRING((.1 b, a -0, -0 ë),(.1 b, a -0, -0 ë))'));

--disable_warnings
Select IsClosed(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')), LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))));

--enable_warnings

Select IsClosed(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'));

Select IsClosed(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'));

Select IsClosed(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))));

Select IsClosed(MLineFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'));

Select IsClosed(MultiLineStringFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000),(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'));

Select IsClosed(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')), LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000'))))));


### The below section is commented till the BUG@17167633 is fixed
#Select IsClosed(LineFromText('LINESTRING(.1 0, 1 1, 0.1 0)'));
#
#Select IsClosed(LineStringFromText('LINESTRING(.1 0, 1 1, 0.1 0)'));
#
--disable_warnings
Select IsClosed(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')))));

--enable_warnings
#Select IsClosed(MLineFromText('MULTILINESTRING((.1 0, 1 1, 0.1 0.0))'));
#
#Select IsClosed(MultiLineStringFromText('MULTILINESTRING((.1 0, 1 1, 0.1 0.0),(.1 0, 1 1, 0.1 0.0))'));
#
--disable_warnings
Select IsClosed(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')), LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2'))))));

--enable_warnings

--error ER_GIS_INVALID_DATA
Select IsClosed(LineFromText('LINESTRING(. ., 1 ~, ^ -000011111)'));

--error ER_GIS_INVALID_DATA
Select IsClosed(LineStringFromText('LINESTRING(. ., 1 ~, ^ -000011111)'));

--disable_warnings
Select IsClosed(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')))));

--enable_warnings
--error ER_GIS_INVALID_DATA
Select IsClosed(MLineFromText('MULTILINESTRING((. ., 1 ~, ^ -000011111))'));

--error ER_GIS_INVALID_DATA
Select IsClosed(MultiLineStringFromText('MULTILINESTRING((. ., 1 ~, ^ -000011111),(. ., 1 ~, ^ -000011111))'));

--disable_warnings
Select IsClosed(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')), LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111'))))));

--enable_warnings

--echo #Invalid WKB data
--error ER_GIS_DATA_WRONG_ENDIANESS
select IsClosed(0x01010000000200000000000000000000000000000000002440000000000000F03F0000000000000040);
--error ER_GIS_DATA_WRONG_ENDIANESS
select IsClosed(0x000000000400000002000000000000000040240000000000003FF00000000000004000000000000000);
--error ER_GIS_DATA_WRONG_ENDIANESS
select IsClosed(0x01020000000100000001020000000200000000000000000000000000000000002440000000000000F0BFD7A3703D0AD70140);
--error ER_GIS_DATA_WRONG_ENDIANESS
select IsClosed(0x00000000060000000100000000020000000200000000000000004024000000000000BFF00000000000004001D70A3D70A3D7);

############################################################################################
# Checking the EndPoint function to work with the LineString class                         #
############################################################################################

--echo #Checking the EndPoint for the line class 
select fid,AsText(EndPoint(g)) from gis_line where g is not NULL;
select count(EndPoint(g)) FROM gis_line;


--echo #Checking the EndPoint of some random Lines.
Select AsText(EndPoint(LineFromText('LINESTRING(0 0,1 0,2 0)')));

Select AsText(EndPoint(LineStringFromText('LINESTRING(0 0,1 0,2 0)')));

Select AsText(EndPoint(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0))))));


--echo #WKB data, little-endian format
select AsText(EndPoint(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040)));

select AsText(EndPoint(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF)));

select AsText(EndPoint(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445)));


--echo #WKB data, big-endian format
select AsText(EndPoint(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000)));

select AsText(EndPoint(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000)));

select AsText(EndPoint(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C)));


Select AsText(EndPoint(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)')));

Select AsText(EndPoint(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)')));

Select AsText(EndPoint(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(0, -2))))));


Select AsText(EndPoint(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)')));

Select AsText(EndPoint(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)')));

Select AsText(EndPoint(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2), Point(5, 1), Point(1, -5))))));


--error ER_GIS_INVALID_DATA
Select AsText(EndPoint(LineFromText('LINESTRING(.1 b, a -0, -0 ë)')));

--error ER_GIS_INVALID_DATA
Select AsText(EndPoint(LineStringFromText('LINESTRING(.1 b, a -0, -0 ë)')));

--disable_Warnings
Select AsText(EndPoint(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))));

--enable_warnings

Select AsText(EndPoint(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)')));

Select AsText(EndPoint(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)')));

Select AsText(EndPoint(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000'))))));


### The below section is commented till the BUG@17167633 is fixed
#Select AsText(EndPoint(LineFromText('LINESTRING(.1 0, 1 1, 2 2)')));
#
#Select AsText(EndPoint(LineStringFromText('LINESTRING(.1 0, 1 1, 2 2)')));
#
--disable_warnings
Select AsText(EndPoint(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2'))))));

--enable_warnings

--error ER_GIS_INVALID_DATA
Select AsText(EndPoint(LineFromText('LINESTRING(. ., 1 ~, ^ -000011111)')));

--error ER_GIS_INVALID_DATA
Select AsText(EndPoint(LineStringFromText('LINESTRING(. ., 1 ~, ^ -000011111)')));

--disable_warnings
Select AsText(EndPoint(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111'))))));

--enable_warnings
--error ER_GIS_INVALID_DATA
Select EndPoint(LineStringFromText('LINESTRING()'));


### The below section is commented till the BUG@17175957 is fixed
#Select EndPoint(LineStringFromWKB(AsWKB(LineString(Point(0, 0))))) = EndPoint(LineFromText('LINESTRING(-0 0)'));
#
--disable_warnings
Select EndPoint(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))) = EndPoint(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, -0 0)'));

--enable_warnings
Select EndPoint(LineFromText('LINESTRING(0 0,1 0,2 0)')) = EndPoint(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 2 0)'));

Select EndPoint(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)')) = EndPoint(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))));


--echo #Invalid WKB data
--error ER_GIS_DATA_WRONG_ENDIANESS
select AsText(EndPoint(0x01010000000200000000000000000000000000000000002440000000000000F03F0000000000000040));
--error ER_GIS_DATA_WRONG_ENDIANESS
select AsText(EndPoint(0x000000000400000002000000000000000040240000000000003FF00000000000004000000000000000));

############################################################################################
# Checking the Glength function to work with the LineString and MultiLineString class      #
############################################################################################

--echo #Checking the GLength for the line and multiLine class 
select fid,GLength(g) from gis_line where g is not NULL;
select count(GLength(g)) FROM gis_line;


--echo #Checking the GLength for the line and multiLine class 
select fid,GLength(g) from gis_multi_line where g is not NULL;
select count(GLength(g)) FROM gis_multi_line;


--echo #Checking the GLength of some random Lines and MultiLines.
Select GLength(LineFromText('LINESTRING(0 0,1 0,2 0)'));

Select GLength(LineStringFromText('LINESTRING(0 0,1 0,2 0)'));

Select GLength(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))));

Select GLength(MLineFromText('MULTILINESTRING((0 0,1 0,2 0))'));

Select GLength(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0),(2 0,1 0,0 0))'));

Select GLength(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0))))));


--echo #WKB data, little-endian format
select GLength(LineFromWKB(0x01020000000700000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004000000000000000000000000000000000));

select GLength(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF));

select GLength(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445));

select GLength(MLineFromWKB(0x01050000000100000001020000000700000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004000000000000000000000000000000000));

select GLength(MLineFromWKB(0x01050000000200000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001020000000200000014AE47E17A14F2BF14AE47E17A14F23F19AA622AFD84BFBF19AA622AFD84BF3F));

select GLength(MLineFromWKB(0x01050000000300000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001020000000200000014AE47E17A14F2BF14AE47E17A14F23F19AA622AFD84BFBF19AA622AFD84BF3F0102000000020000005510F2A07CE90C440080E03779C341430000000084D79741003D9160E458F1C3));


--echo #WKB data, big-endian format
select GLength(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000));

select GLength(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000));

select GLength(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE000000000000000040F86A0000000000C0F86A0000000000));

select GLength(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000));

select GLength(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C37937E08000));

select GLength(MLineFromWKB(0x0000000005000000020000000002000000035FB317E5EF3AB327E3A4B378469B67320000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C37937E08000));


Select GLength(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'));

Select GLength(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'));

Select GLength(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(0, -2)))));

Select GLength(MLineFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2))'));

Select GLength(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2),(0 0,1 0,2 0, 2 1, 0 -2))'));

Select GLength(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2))))));


Select GLength(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'));

Select GLength(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'));

Select GLength(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2), Point(5, 1), Point(1, -5)))));

Select GLength(MLineFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))'));

Select GLength(MultiLineStringFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5),(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))'));

Select GLength(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2) ), LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2))))));


--error ER_GIS_INVALID_DATA
Select GLength(LineFromText('LINESTRING(0.1 b, a -0, -0 ë)'));

--error ER_GIS_INVALID_DATA
Select GLength(LineStringFromText('LINESTRING(.1 b, a -0, -0 ë)'));

--disable_Warnings
Select GLength(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')))));

--enable_warnings
--error ER_GIS_INVALID_DATA
Select GLength(MLineFromText('MULTILINESTRING((0.1 b, a -0, -0 ë))'));

--error ER_GIS_INVALID_DATA
Select GLength(MultiLineStringFromText('MULTILINESTRING((.1 b, a -0, -0 ë),(.1 b, a -0, -0 ë))'));

--disable_warnings
Select GLength(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë') ), LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))));

--enable_warnings

Select GLength(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'));

Select GLength(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'));

Select GLength(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))));

Select GLength(MLineFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'));

Select GLength(MultiLineStringFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000),(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'));

Select GLength(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000') ), LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000'))))));


### The below section is commented till the BUG@17167633 is fixed
#Select GLength(LineFromText('LINESTRING(.1 0, 1 1, 2 2)'));
#
#Select GLength(LineStringFromText('LINESTRING(.1 0, 1 1, 2 2)'));
#
--disable_warnings
Select GLength(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')))));

--enable_warnings
#Select GLength(MLineFromText('MULTILINESTRING((.1 0, 1 1, 2 2))'));
#
#Select GLength(MultiLineStringFromText('MULTILINESTRING((.1 0, 1 1, 2 2),(.1 0, 1 1, 2 2))'));
#
--disable_warnings
Select GLength(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')), LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2'))))));
--enable_warnings


--error ER_GIS_INVALID_DATA
Select GLength(LineFromText('LINESTRING(. ., 1 ~, ^ -000011111)'));

--error ER_GIS_INVALID_DATA
Select GLength(LineStringFromText('LINESTRING(. ., 1 ~, ^ -000011111)'));

--disable_warnings
Select GLength(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')))));

--enable_warnings
--error ER_GIS_INVALID_DATA
Select GLength(LineStringFromText('LINESTRING()'));

--error ER_GIS_INVALID_DATA
Select GLength(MLineFromText('MULTILINESTRING((. ., 1 ~, ^ -000011111))'));

--error ER_GIS_INVALID_DATA
Select GLength(MultiLineStringFromText('MULTILINESTRING((. ., 1 ~, ^ -000011111),(. ., 1 ~, ^ -000011111))'));

--disable_warnings
Select GLength(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')), LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111'))))));

--enable_warnings

Select GLength(LineStringFromWKB(AsWKB(LineString(Point(0, 0))))) = GLength(LineFromText('LINESTRING(-0 0)'));

--disable_warnings
Select GLength(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))) = GLength(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, -0 0)'));
--enable_warnings

Select GLength(LineFromText('LINESTRING(0 0,1 0,2 0)')) = GLength(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 2 0)'));

--disable_warnings
Select GLength(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)')) = GLength(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))));
--enable_warnings

Select GLength(LineFromText('LINESTRING(0 0, 2 0, 2 2, 4 2, 4 4, 6 4)')) = GLength(LineStringFromText('LINESTRING(0 0, 0 -2, -2 -2, -4 -2, -4 -4, -4 -6)'));

Select GLength(LineFromText('LINESTRING(1 2, 5 1.5, 1 1, 5 0.5, 1 0, 5 -0.5, 1 -1)')) = GLength(LineStringFromText('LINESTRING(0 0, 0.5 4, 1 0, 1.5 4, 2 0, 2.5 4, 3 0)'));

Select GLength(MLineFromText('MULTILINESTRING((1 0, 5 4, 0.2 5.3, -10 -0))')) = GLength(MultiLineStringFromText('MULTILINESTRING((1 0, 5 4, 0.2 5.3),(0.2 5.3, -10 -0))'));

Select GLength(MultiLineStringFromText('MULTILINESTRING((0.99999 1, 360.000001 -0.4),(2.5 1.0, -0 -0))')) = GLength(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0.99999, 1), Point(360.000001, -0.4)), LineString(Point(-0, -0), Point(2.5, 1.0))))));


--echo #Invalid WKB data
--error ER_GIS_DATA_WRONG_ENDIANESS
select GLength(0x01010000000200000000000000000000000000000000002440000000000000F03F0000000000000040);
--error ER_GIS_DATA_WRONG_ENDIANESS
select GLength(0x000000000400000002000000000000000040240000000000003FF00000000000004000000000000000);
--error ER_GIS_DATA_WRONG_ENDIANESS
select GLength(0x01020000000100000001020000000200000000000000000000000000000000002440000000000000F0BFD7A3703D0AD70140);
--error ER_GIS_DATA_WRONG_ENDIANESS
select GLength(0x00000000060000000100000000020000000200000000000000004024000000000000BFF00000000000004001D70A3D70A3D7);

############################################################################################
# Checking the NumPoints function to work with the LineString                              #
############################################################################################

--echo #Checking the NumPoints for the line class 
select fid,NumPoints(g) from gis_line where g is not NULL;
select count(NumPoints(g)) FROM gis_line;


--echo #Checking the NumPoints of some random Lines 
Select NumPoints(LineFromText('LINESTRING(0 0,1 0,2 0)'));

Select NumPoints(LineStringFromText('LINESTRING(0 0,1 0,2 0)'));

Select NumPoints(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))));


--echo #WKB data, little-endian format
select NumPoints(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040));

select NumPoints(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF));

select NumPoints(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445));


--echo #WKB data, big-endian format
select NumPoints(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000));

select NumPoints(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000));

select NumPoints(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C));


Select NumPoints(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'));

Select NumPoints(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'));

Select NumPoints(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(0, -2)))));


Select NumPoints(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'));

Select NumPoints(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'));

Select NumPoints(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2), Point(5, 1), Point(1, -5)))));


--error ER_GIS_INVALID_DATA
Select NumPoints(LineFromText('LINESTRING(.1 b, a -0, -0 ë)'));

--error ER_GIS_INVALID_DATA
Select NumPoints(LineStringFromText('LINESTRING(.1 b, a -0, -0 ë)'));

--disable_Warnings
Select NumPoints(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')))));

--enable_warnings

Select NumPoints(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'));

Select NumPoints(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'));

Select NumPoints(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))));


### The below section is commented till the BUG@17167633 is fixed
#Select NumPoints(LineFromText('LINESTRING(.1 0, 1 1, 2 2)'));
#
#Select NumPoints(LineStringFromText('LINESTRING(.1 0, 1 1, 2 2)'));
#
--disable_warnings
Select NumPoints(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')))));

--enable_warnings

--error ER_GIS_INVALID_DATA
Select NumPoints(LineFromText('LINESTRING(. ., 1 ~, ^ -000011111)'));

--error ER_GIS_INVALID_DATA
Select NumPoints(LineStringFromText('LINESTRING(. ., 1 ~, ^ -000011111)'));

--disable_warnings
Select NumPoints(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')))));

--enable_warnings
--error ER_GIS_INVALID_DATA
Select NumPoints(LineStringFromText('LINESTRING()'));


Select NumPoints(LineStringFromWKB(AsWKB(LineString(Point(0, 0))))) = NumPoints(LineFromText('LINESTRING(-0 0)'));

--disable_warnings
Select NumPoints(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))) = NumPoints(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, -0 0)'));
--enable_warnings

Select NumPoints(LineFromText('LINESTRING(0 0,1 0,2 0)')) = NumPoints(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 2 0)'));

Select NumPoints(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)')) = NumPoints(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))));

Select NumPoints(LineFromText('LINESTRING(0 0, 2 0, 2 2, 4 2, 4 4, 6 4)')) = NumPoints(LineStringFromText('LINESTRING(0 0, 0 -2, -2 -2, -4 -2, -4 -4, -4 -6)'));

Select NumPoints(LineFromText('LINESTRING(1 2, 5 1.5, 1 1, 5 0.5, 1 0, 5 -0.5, 1 -1)')) = NumPoints(LineStringFromText('LINESTRING(0 0, 0.5 4, 1 0, 1.5 4, 2 0, 2.5 4, 3 0)'));


--echo #Invalid WKB data
--error ER_GIS_DATA_WRONG_ENDIANESS
select NumPoints(0x01010000000200000000000000000000000000000000002440000000000000F03F0000000000000040);
--error ER_GIS_DATA_WRONG_ENDIANESS
select NumPoints(0x000000000400000002000000000000000040240000000000003FF00000000000004000000000000000);

############################################################################################
# Checking the PointN function to work with the LineString                                 #
############################################################################################

--echo #Checking the PointN for the line class 
select fid,AsText(PointN(g, 3)) from gis_line where g is not NULL;
select count(PointN(g, 1)) FROM gis_line;


--echo #Checking the PointN of some random Lines.
Select AsText(PointN(LineFromText('LINESTRING(0 0,1 0,2 0)'), 3));

Select AsText(PointN(LineStringFromText('LINESTRING(0 0,1 0,2 0)'), 3));

Select AsText(PointN(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))), 3));


--echo #WKB data, little-endian format
select AsText(PointN(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040),2));

select AsText(PointN(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040),7));

select AsText(PointN(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF),2));

select AsText(PointN(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445),3));

select AsText(PointN(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445),4));


--echo #WKB data, big-endian format
select AsText(PointN(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000),3));

select AsText(PointN(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000),5));

select AsText(PointN(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C),3.4));

select AsText(PointN(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C),3.6));


Select AsText(PointN(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'), 5));

Select AsText(PointN(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'), 5));

Select AsText(PointN(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(0, -2)))), 3));


Select AsText(PointN(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'), 5));

Select AsText(PointN(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'), 5));

Select AsText(PointN(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2), Point(5, 1), Point(1, -5)))), 5));


--error ER_GIS_INVALID_DATA
Select AsText(PointN(LineFromText('LINESTRING(.1 b, a -0, -0 ë)'), 3));

--error ER_GIS_INVALID_DATA
Select AsText(PointN(LineStringFromText('LINESTRING(.1 b, a -0, -0 ë)'), 3));

--disable_Warnings
Select AsText(PointN(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')))), 3));

--enable_warnings

Select AsText(PointN(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'), 3));

Select AsText(PointN(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'), 3));

Select AsText(PointN(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))), 2));


### The below section is commented till the BUG@17167633 is fixed
#Select AsText(PointN(LineFromText('LINESTRING(.1 0, 1 1, 2 2)'), 1));
#
#Select AsText(PointN(LineStringFromText('LINESTRING(.1 0, 1 1, 2 2)'), 1));
#
--disable_warnings
Select AsText(PointN(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')))), 1));

--enable_warnings

--error ER_GIS_INVALID_DATA
Select AsText(PointN(LineFromText('LINESTRING(. ., 1 ~, ^ -000011111)'), 2));

--error ER_GIS_INVALID_DATA
Select AsText(PointN(LineStringFromText('LINESTRING(. ., 1 ~, ^ -000011111)'), 2));

--disable_warnings
Select AsText(PointN(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')))), 2));

--enable_warnings
--error ER_GIS_INVALID_DATA
Select PointN(LineStringFromText('LINESTRING()'), 1);

Select AsText(PointN(LineFromText('LINESTRING(0 0, 1 1, 2 2)'), 0));

Select AsText(PointN(LineFromText('LINESTRING(0 0, 1 1, 2 2)'), -1));

Select AsText(PointN(LineFromText('LINESTRING(0 0, 1 1, 2 2)'), 3-1));

Select AsText(PointN(LineFromText('LINESTRING(0 0, 1 1, 2 2)'), 2.5));

Select AsText(PointN(LineFromText('LINESTRING(0 0, 1 1, 2 2)'), 2.4));


### The below section is commented till the BUG@17175957 is fixed
#Select AsText(PointN(LineStringFromWKB(AsWKB(LineString(Point(0, 0)))), 1)) = AsText(PointN(LineFromText('LINESTRING(-0 0)'), 1));
#
--disable_warnings
Select PointN(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')))), 3) = PointN(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, -0 0)'), 5);
--enable_warnings

Select PointN(LineFromText('LINESTRING(0 0,1 0,2 0)'), 2) = PointN(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 2 0)'), 2);

Select PointN(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'), 3) = PointN(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))), 3);


--echo #Invalid WKB data
--error ER_GIS_DATA_WRONG_ENDIANESS
select AsText(PointN(0x01010000000200000000000000000000000000000000002440000000000000F03F0000000000000040,2));
--error ER_GIS_DATA_WRONG_ENDIANESS
select AsText(PointN(0x000000000400000002000000000000000040240000000000003FF00000000000004000000000000000,5));

############################################################################################
# Checking the StartPoint function to work with the LineString class                       #
############################################################################################

--echo #Checking the StartPoint for the line class 
select fid,AsText(StartPoint(g)) from gis_line where g is not NULL;
select count(StartPoint(g)) FROM gis_line;


--echo #Checking the StartPoint of some random Lines.
Select AsText(StartPoint(LineFromText('LINESTRING(0 0,1 0,2 0)')));

Select AsText(StartPoint(LineStringFromText('LINESTRING(0 0,1 0,2 0)')));

Select AsText(StartPoint(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0))))));


--echo #WKB data, little-endian format
select AsText(StartPoint(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040)));

select AsText(StartPoint(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF)));

select AsText(StartPoint(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445)));


--echo #WKB data, big-endian format
select AsText(StartPoint(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000)));

select AsText(StartPoint(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000)));

select AsText(StartPoint(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C)));


Select AsText(StartPoint(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)')));

Select AsText(StartPoint(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)')));

Select AsText(StartPoint(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(0, -2))))));


Select AsText(StartPoint(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)')));

Select AsText(StartPoint(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)')));

Select AsText(StartPoint(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2), Point(5, 1), Point(1, -5))))));


--error ER_GIS_INVALID_DATA
Select AsText(StartPoint(LineFromText('LINESTRING(.1 b, a -0, -0 ë)')));

--error ER_GIS_INVALID_DATA
Select AsText(StartPoint(LineStringFromText('LINESTRING(.1 b, a -0, -0 ë)')));

--disable_Warnings
Select AsText(StartPoint(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))));

--enable_warnings

Select AsText(StartPoint(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)')));

Select AsText(StartPoint(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)')));

Select AsText(StartPoint(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000'))))));


### The below section is commented till the BUG@17167633 is fixed
#Select AsText(StartPoint(LineFromText('LINESTRING(.1 0, 1 1, 2 2)')));
#
#Select AsText(StartPoint(LineStringFromText('LINESTRING(.1 0, 1 1, 2 2)')));
#
--disable_warnings
Select AsText(StartPoint(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2'))))));

--enable_warnings

--error ER_GIS_INVALID_DATA
Select AsText(StartPoint(LineFromText('LINESTRING(. ., 1 ~, ^ -000011111)')));

--error ER_GIS_INVALID_DATA
Select AsText(StartPoint(LineStringFromText('LINESTRING(. ., 1 ~, ^ -000011111)')));

--disable_warnings
Select AsText(StartPoint(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111'))))));

--enable_warnings
--error ER_GIS_INVALID_DATA
Select StartPoint(LineStringFromText('LINESTRING()'));


### The below section is commented till the BUG@17175957 is fixed
#Select StartPoint(LineStringFromWKB(AsWKB(LineString(Point(0, 0))))) = StartPoint(LineFromText('LINESTRING(-0 0)'));
#
--disable_warnings
Select StartPoint(LineStringFromWKB(AsWKB(LineString(Point('q', 'b'), Point('a', '-0'), Point('-0', 'ë'))))) = StartPoint(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, -0 0)'));
--enable_warnings

Select StartPoint(LineFromText('LINESTRING(0 0,1 0,2 0)')) = StartPoint(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 2 0)'));

Select StartPoint(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)')) = StartPoint(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))));


--echo #Invalid WKB data
--error ER_GIS_DATA_WRONG_ENDIANESS
select AsText(StartPoint(0x01010000000200000000000000000000000000000000002440000000000000F03F0000000000000040));
--error ER_GIS_DATA_WRONG_ENDIANESS
select AsText(StartPoint(0x000000000400000002000000000000000040240000000000003FF00000000000004000000000000000));

############################################################################################
# Checking the procedures to work with the Attribute functions of Line and MultiLine class #
############################################################################################

--echo #check with procedures to work with the Attribute functions of Line and MultiLine class
--disable_warnings
delimiter |;
--echo #create procedure to check Attributes
CREATE PROCEDURE line_attri()
BEGIN
Select GeometryType(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2),(0 -2,2 1,2 0, 1 0, 0 0))'));
Select SRID(MultiLineStringFromText('MULTILINESTRING((.1 b, a -0, -0 ë),(.1 b, a -0, -0 ë))'));
Select Dimension(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2), Point(5, 1), Point(1, -5)))));
Select AsText(Envelope(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2) ), LineString(Point(10, -2), Point(5, 1), Point(1, -5)))))));
Select IsSimple(MultiLineStringFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000),(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'));
Select IsClosed(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')), LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111'))))));
Select AsText(EndPoint(LineFromText('LINESTRING(.1 b, a -0, -0 ë)')));
Select GLength(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2),(0 0,1 0,2 0, 2 1, 0 -2))'));
Select GLength(MultiLineStringFromText('MULTILINESTRING((0.99999 1, 360.000001 -0.4),(2.5 1.0, -0 -0))')) = GLength(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0.99999, 1), Point(360.000001, -0.4)), LineString(Point(-0, -0), Point(2.5, 1.0))))));
Select NumPoints(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'));
Select AsText(PointN(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')))), 3));
Select StartPoint(LineStringFromWKB(AsWKB(LineString(Point('q', 'b'), Point('a', '-0'), Point('-0', 'ë'))))) = StartPoint(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, -0 0)'));
END |
delimiter ;|

--echo #call the proc
--error ER_GIS_INVALID_DATA
CALL line_attri;












--enable_warnings

--echo #Dropping the created procedures.
drop procedure line_attri;

############################################################################################
# Checking the Line and MultiLine properties from within the cursor                        #
############################################################################################

--echo #Checking the Line and MultiLine properties from within the cursor 
delimiter |;

CREATE PROCEDURE line_attri()
BEGIN
  DECLARE v LINESTRING;
  DECLARE c CURSOR FOR Select g from gis_line;

  OPEN c;
  FETCH c INTO v;
  Select GeometryType(v);
  Select SRID(v);
  Select Dimension(v);
  Select AsText(Envelope(v));
  Select IsSimple(v);
  Select IsClosed(v);
  Select AsText(EndPoint(v));
  Select GLength(v);
  Select NumPoints(v);
  Select AsText(PointN(v,1));
  Select AsText(StartPoint(v));
  CLOSE c;
END|
delimiter ;|

--echo #Calling the cursor
CALL line_attri();

--echo #Dropping the created cursor
drop procedure line_attri;

############################################################################################
# Checking the Self join with the Line and MultiLine Attributes                            #
############################################################################################

--echo #Checking the Self join with the Line and MultiLine Attributes 
--echo check self join
SELECT GeometryType(a.g), SRID(a.g), Dimension(a.g), IsSimple(a.g), IsClosed(a.g),
AsText(Envelope(a.g)), AsText(EndPoint(a.g)), AsText(StartPoint(a.g)), AsText(PointN(a.g,1)),
GLength(a.g), NumPoints(a.g)
FROM gis_line a,gis_line b WHERE GeometryType(a.g)=GeometryType(b.g) AND 
SRID(a.g)=SRID(b.g) AND Dimension(a.g)=Dimension(b.g) AND Envelope(a.g)=Envelope(b.g) AND 
IsSimple(a.g)=IsSimple(b.g) AND EndPoint(a.g)=EndPoint(b.g) AND StartPoint(a.g)=StartPoint(b.g)
AND PointN(a.g,1)=PointN(b.g,1) AND GLength(a.g)=GLength(b.g) AND NumPoints(a.g)=NumPoints(b.g);

############################################################################################
# Checking the aggregate functions on the Line and MultiLine Attributes                    #
############################################################################################

--echo #Checking the aggregate functions on the Line and MultiLine Attributes 
--echo #Checking the SUM function
select SUM(GeometryType(g)) from gis_line where g is not NULL;

select SUM(GeometryType(g)) from gis_multi_line where g is not NULL;

select SUM(SRID(g)) from gis_line where g is not NULL;

select SUM(SRID(g)) from gis_multi_line where g is not NULL;

select SUM(Dimension(g)) from gis_line where g is not NULL;

select SUM(Dimension(g)) from gis_multi_line where g is not NULL;

select SUM(AsText(Envelope(g))) from gis_line where g is not NULL;

select SUM(AsText(Envelope(g))) from gis_multi_line where g is not NULL;

select SUM(IsSimple(g)) from gis_line where g is not NULL;

select SUM(IsSimple(g)) from gis_multi_line where g is not NULL;

select SUM(IsClosed(g)) from gis_line where g is not NULL;

select SUM(IsClosed(g)) from gis_multi_line where g is not NULL;

select SUM(AsText(EndPoint(g))) from gis_line where g is not NULL;

select SUM(GLength(g)) from gis_line where g is not NULL;

select SUM(GLength(g)) from gis_multi_line where g is not NULL;

select SUM(NumPoints(g)) from gis_line where g is not NULL;

select SUM(AsText(PointN(g, 3))) from gis_line where g is not NULL;

select SUM(AsText(StartPoint(g))) from gis_line where g is not NULL;


--echo #Checking the MIN function
select MIN(GeometryType(g)) from gis_line where g is not NULL;

select MIN(GeometryType(g)) from gis_multi_line where g is not NULL;

select MIN(SRID(g)) from gis_line where g is not NULL;

select MIN(SRID(g)) from gis_multi_line where g is not NULL;

select MIN(Dimension(g)) from gis_line where g is not NULL;

select MIN(Dimension(g)) from gis_multi_line where g is not NULL;

select MIN(AsText(Envelope(g))) from gis_line where g is not NULL;

select MIN(AsText(Envelope(g))) from gis_multi_line where g is not NULL;

select MIN(IsSimple(g)) from gis_line where g is not NULL;

select MIN(IsSimple(g)) from gis_multi_line where g is not NULL;

select MIN(IsClosed(g)) from gis_line where g is not NULL;

select MIN(IsClosed(g)) from gis_multi_line where g is not NULL;

select MIN(AsText(EndPoint(g))) from gis_line where g is not NULL;

select MIN(GLength(g)) from gis_line where g is not NULL;

select MIN(GLength(g)) from gis_multi_line where g is not NULL;

select MIN(NumPoints(g)) from gis_line where g is not NULL;

select MIN(AsText(PointN(g, 3))) from gis_line where g is not NULL;

select MIN(AsText(StartPoint(g))) from gis_line where g is not NULL;


--echo #Checking the MAX function
select MAX(GeometryType(g)) from gis_line where g is not NULL;

select MAX(GeometryType(g)) from gis_multi_line where g is not NULL;

select MAX(SRID(g)) from gis_line where g is not NULL;

select MAX(SRID(g)) from gis_multi_line where g is not NULL;

select MAX(Dimension(g)) from gis_line where g is not NULL;

select MAX(Dimension(g)) from gis_multi_line where g is not NULL;

select MAX(AsText(Envelope(g))) from gis_line where g is not NULL;

select MAX(AsText(Envelope(g))) from gis_multi_line where g is not NULL;

select MAX(IsSimple(g)) from gis_line where g is not NULL;

select MAX(IsSimple(g)) from gis_multi_line where g is not NULL;

select MAX(IsClosed(g)) from gis_line where g is not NULL;

select MAX(IsClosed(g)) from gis_multi_line where g is not NULL;

select MAX(AsText(EndPoint(g))) from gis_line where g is not NULL;

select MAX(GLength(g)) from gis_line where g is not NULL;

select MAX(GLength(g)) from gis_multi_line where g is not NULL;

select MAX(NumPoints(g)) from gis_line where g is not NULL;

select MAX(AsText(PointN(g, 3))) from gis_line where g is not NULL;

select MAX(AsText(StartPoint(g))) from gis_line where g is not NULL;


--echo #Checking the STD function
select STD(GeometryType(g)) from gis_line where g is not NULL;

select STD(GeometryType(g)) from gis_multi_line where g is not NULL;

select STD(SRID(g)) from gis_line where g is not NULL;

select STD(SRID(g)) from gis_multi_line where g is not NULL;

select STD(Dimension(g)) from gis_line where g is not NULL;

select STD(Dimension(g)) from gis_multi_line where g is not NULL;

select STD(AsText(Envelope(g))) from gis_line where g is not NULL;

select STD(AsText(Envelope(g))) from gis_multi_line where g is not NULL;

select STD(IsSimple(g)) from gis_line where g is not NULL;

select STD(IsSimple(g)) from gis_multi_line where g is not NULL;

select STD(IsClosed(g)) from gis_line where g is not NULL;

select STD(IsClosed(g)) from gis_multi_line where g is not NULL;

select STD(AsText(EndPoint(g))) from gis_line where g is not NULL;

select STD(GLength(g)) from gis_line where g is not NULL;

select STD(GLength(g)) from gis_multi_line where g is not NULL;

select STD(NumPoints(g)) from gis_line where g is not NULL;

select STD(AsText(PointN(g, 3))) from gis_line where g is not NULL;

select STD(AsText(StartPoint(g))) from gis_line where g is not NULL;


--echo #Checking the distinct function
select COUNT(DISTINCT(GeometryType(g))) from gis_line where g is not NULL;

select COUNT(DISTINCT(GeometryType(g))) from gis_multi_line where g is not NULL;

select COUNT(DISTINCT(SRID(g))) from gis_line where g is not NULL;

select COUNT(DISTINCT(SRID(g))) from gis_multi_line where g is not NULL;

select COUNT(DISTINCT(Dimension(g))) from gis_line where g is not NULL;

select COUNT(DISTINCT(Dimension(g))) from gis_multi_line where g is not NULL;

select COUNT(DISTINCT(AsText(Envelope(g)))) from gis_line where g is not NULL;

select COUNT(DISTINCT(AsText(Envelope(g)))) from gis_multi_line where g is not NULL;

select COUNT(DISTINCT(IsSimple(g))) from gis_line where g is not NULL;

select COUNT(DISTINCT(IsSimple(g))) from gis_multi_line where g is not NULL;

select COUNT(DISTINCT(IsClosed(g))) from gis_line where g is not NULL;

select COUNT(DISTINCT(IsClosed(g))) from gis_multi_line where g is not NULL;

select COUNT(DISTINCT(AsText(EndPoint(g)))) from gis_line where g is not NULL;

select COUNT(DISTINCT(GLength(g))) from gis_line where g is not NULL;

select COUNT(DISTINCT(GLength(g))) from gis_multi_line where g is not NULL;

select COUNT(DISTINCT(NumPoints(g))) from gis_line where g is not NULL;

select COUNT(DISTINCT(AsText(PointN(g, 3)))) from gis_line where g is not NULL;

select COUNT(DISTINCT(AsText(StartPoint(g)))) from gis_line where g is not NULL;


--echo #Checking the AVG function
select AVG(GeometryType(g)) from gis_line where g is not NULL;

select AVG(GeometryType(g)) from gis_multi_line where g is not NULL;

select AVG(SRID(g)) from gis_line where g is not NULL;

select AVG(SRID(g)) from gis_multi_line where g is not NULL;

select AVG(Dimension(g)) from gis_line where g is not NULL;

select AVG(Dimension(g)) from gis_multi_line where g is not NULL;

select AVG(AsText(Envelope(g))) from gis_line where g is not NULL;

select AVG(AsText(Envelope(g))) from gis_multi_line where g is not NULL;

select AVG(IsSimple(g)) from gis_line where g is not NULL;

select AVG(IsSimple(g)) from gis_multi_line where g is not NULL;

select AVG(IsClosed(g)) from gis_line where g is not NULL;

select AVG(IsClosed(g)) from gis_multi_line where g is not NULL;

select AVG(AsText(EndPoint(g))) from gis_line where g is not NULL;

select AVG(GLength(g)) from gis_line where g is not NULL;

select AVG(GLength(g)) from gis_multi_line where g is not NULL;

select AVG(NumPoints(g)) from gis_line where g is not NULL;

select AVG(AsText(PointN(g, 3))) from gis_line where g is not NULL;

select AVG(AsText(StartPoint(g))) from gis_line where g is not NULL;


--echo #Final Cleanup
--disable_warnings
DROP TABLE IF EXISTS gis_line, gis_multi_line;
--enable_warnings
