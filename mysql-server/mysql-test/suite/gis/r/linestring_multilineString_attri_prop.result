#Confirming the storage engine
SHOW VARIABLES LIKE '%engine%';
Variable_name	Value
default_storage_engine	MyISAM
default_tmp_storage_engine	MyISAM
internal_tmp_disk_storage_engine	MYISAM
#Creating the spatial Geometry object
USE test;
DROP TABLE IF EXISTS gis_line, gis_multi_line;
CREATE TABLE gis_line  (fid INTEGER NOT NULL PRIMARY KEY, g LINESTRING);
CREATE TABLE gis_multi_line (fid INTEGER NOT NULL PRIMARY KEY, g MULTILINESTRING);
#INSERT valid entries to LineString class
INSERT INTO gis_line VALUES
(201, LineFromText('LINESTRING(0 0,0 10,10 0)')),
(202, LineFromText('LINESTRING(0 0,0 0,0 0)')),
(203, LineFromText('LINESTRING(0 0.62,0.213 0,0 0)')),
(204, LineStringFromText('LINESTRING(10 10,10 10,10 10,10 10,10 10)')),
(205, LineStringFromText('LINESTRING(10 10,10 10,10 10,10 10,10 10)')),
(206, LineStringFromText('LINESTRING(10 10,20 10,20 20,10 20,10 10)')),
(207, LineStringFromWKB(AsWKB(LineString(Point(10, 10), Point(10, 10), Point(10, 10), Point(10, 10), Point(10, 10))))),
(208, LineStringFromWKB(AsWKB(LineString(Point(10, 10), Point(10, 10), Point(10, 10), Point(10, 10), Point(10, 10))))),
(209, LineStringFromWKB(AsWKB(LineString(Point(10, 10), Point(0, 10), Point(0, 10))))),
(210, LineStringFromWKB(AsWKB(LineString(Pointoint(99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999, 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999), Point(99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999, 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999)))));
#INSERT invalid entries to LineString class
INSERT INTO gis_line VALUES
(211, LineFromText('LINESTRING(Ç Ç,Ç Ç,Ç Ç)')),
(212, LineFromText('LINESTRING(0 0,0 0,0 Ç)')),
(213, LineFromText('LINESTRING(0 0,0 0,0*0)')),
(214, LineStringFromText('LINESTRING(10 10,10 10,10 10,10 10,10*10)')),
(215, LineStringFromText('LINESTRING(10 10,10 10,10 10,10 10,10 Ç)')),
(216, LineStringFromText('LINESTRING(Ç Ç,Ç Ç,Ç Ç)')),
(217, LineStringFromWKB(AsWKB(LineString(Point(10, 'Ç'), Point(10, 10), Point(10, 10), Point(10, 10), Point(10, 10))))),
(218, LineStringFromWKB(AsWKB(LineString(Point(10, 10), Point(10, 10), Point(10, 10), Point(10, 10), Point(10, 10))))),
(219, LineStringFromWKB(AsWKB(LineString(Point('Ç', 'Ç'), Point('Ç', 'Ç'), Point('Ç', 'Ç'))))),
(220, LineStringFromWKB(AsWKB(LineString(Pointointoint(999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999, 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999))))),
(221, LineFromText('LINESTRING(Ç Ç)')),
(222, LineFromText('LINESTRING()')),
(223, LineFromText('LINESTRING(1 1,1)')),
(224, LineFromText('LINESTRING(-0)')),
(225, LineFromText('LINESTRING(1 1 1 1 1 1 1 1 1 1)')),
(226, LineStringFromText('LINESTRING(Ç Ç)')),
(227, LineStringFromText('LINESTRING(1 1 1 1 1 1 1 1)')),
(228, LineStringFromText('LINESTRING()')),
(229, LineStringFromText('LINESTRING(-0)')),
(230, LineStringFromText('LINESTRING(1 1,1)')),
(231, LineStringFromWKB(AsWKB(LineString(Point('Ç', 'Ç'))))),
(232, LineFromText('LINESTRING(NULL)')),
(233, LineStringFromText('LINESTRING(NULL)')),
(234, LineFromText('LINESTRING(1 .1)'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
#Checking the integrity of the above insert statements 
select count(g) from gis_line;
count(g)
10
select count(astext(g)) from gis_line;
count(astext(g))
10
select count(distinct(g)) from gis_line;
count(distinct(g))
7
select count(distinct(astext(g))) from gis_line;
count(distinct(astext(g)))
7
#INSERT valid entries to multi_line class
INSERT INTO gis_multi_line VALUES
(501, MultiLineStringFromText('MULTILINESTRING((10 48,10 21,10 0),(16 0,16 23,16 48))')),
(502, MLineFromText('MULTILINESTRING((10 48,10 21,10 0))')),
(503, MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 2), Point(3, 5)), LineString(Point(2, 5), Point(5, 8), Point(21, 7)))))),
(504, MultiLineStringFromText('MULTILINESTRING((10 48,10 21,10 0),(16 0,16 23,16 48))')),
(505, MLineFromText('MULTILINESTRING((10 48,10 21,10 0))')),
(506, MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 2), Point(3, 5)), LineString(Point(2, 5), Point(5, 8), Point(21, 7)))))),
(507, MultiLineStringFromText('MULTILINESTRING((10 48,10 21,10 0),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48))')),
(508, MLineFromText('MULTILINESTRING((10 48,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4))')),
(509, MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 2), Point(3, 5)), LineString(Point(2, 5), Point(5, 8), Point(21, 7)), LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)),LineString(Point(2, 5), Point(5, 8), Point(21, 7)))))),
(510, MultiLineStringFromText('MULTILINESTRING((0 0,0 0,0 0),(0 0,0 0,0 0))')),
(511, MLineFromText('MULTILINESTRING((0 0,0 0,0 0))')),
(512, MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(0, 0)), LineString(Point(0, 0), Point(0, -0), Point(0, 0)))))),
(513, MultiLineStringFromText('MULTILINESTRING((999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999),(999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999))')),
(514, MLineFromText('MULTILINESTRING((999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999,999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999))')),
(515, MLineFromWKB(AsWKB(MultiLineString(LineString(PointointineString(Pointointoint(999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999, 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999))))));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
#INSERT invalid entries to multi_line class
INSERT INTO gis_multi_line VALUES
(516, MultiLineStringFromText('MULTILINESTRING((ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ),(ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ))')),
(517, MLineFromText('MULTILINESTRING((ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ, ëô ôÑ))')),
(518, MLineFromWKB(AsWKB(MultiLineString(LineString(Point('ëô', 'ôÑ'), Point('ëô', 'ôÑ')), LineString(Point('ëô', 'ôÑ'), Point('ëô', 'ôÑ'), Point('ëô', 'ôÑ')))))),
(519, MultiLineStringFromText('MULTILINESTRING((0 0,1 1,2 2,3 3,7 ôÑ),(0 0,5 1,2 2,3 3,7 ôÑ))')),
(520, MLineFromText('MULTILINESTRING((0 0,1 1,2 2,3 3,7 -ô))')),
(521, MLineFromWKB(AsWKB(MultiLineString(LineString(Point(3, 'Ñ'), Point(4, 4)), LineString(Point(8, 0), Point(9, -0), Point(5, -7)))))),
(522, MultiLineStringFromText('MULTILINESTRING((2 2 2 2 2 2 2 2 2),(8 8 8 8 8 8 8))')),
(523, MLineFromText('MULTILINESTRING((7 7 7 7 7 7 7))')),
(525, MultiLineStringFromText('MULTILINESTRING((),())')),
(526, MLineFromText('MULTILINESTRING(())')),
(528, MultiLineStringFromText('MULTILINESTRING((a -o),(0 -p))')),
(529, MLineFromText('MULTILINESTRING((-m))')),
(531, MultiLineStringFromText('MULTILINESTRING((-0),(-0))')),
(532, MLineFromText('MULTILINESTRING((-0))')),
(533, MLineFromWKB('AsWKB(MultiLineString(LineString(Point(-0), Point(-0)), LineString(Point(-0), Point(-0), Point(-0))))')),
(534, MultiLineStringFromText('MULTILINESTRING((NULL),(NULL))')),
(535, MLineFromText('MULTILINESTRING((NULL))')),
(537, MLineFromWKB(AsWKB(MultiLineString(LineString(Point('NULL', '/8*7-9%4')))))),
(538, MLineFromWKB(AsWKB(MultiLineString(LineString(Point('NULL', '8*7-9%4ab*rt&gh#rtg')))))),
(539, MLineFromWKB(AsWKB(MultiLineString(LineString(Point('NULL', '88.999999999999999')))))),
(540, MLineFromWKB(AsWKB(MultiLineString(LineString(Point('NULL', '88.999999999999999999999999999999999999999999999999'))))));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
#Checking the integrity of the above insert statements 
select count(g) from gis_multi_line;
count(g)
12
select count(astext(g)) from gis_multi_line;
count(astext(g))
12
select count(distinct(g)) from gis_multi_line;
count(distinct(g))
9
select count(distinct(astext(g))) from gis_multi_line;
count(distinct(astext(g)))
9
#Displaying the inserted spatial Data
Select fid, AsText(g) from gis_line;
fid	AsText(g)
201	LINESTRING(0 0,0 10,10 0)
202	LINESTRING(0 0,0 0,0 0)
203	LINESTRING(0 0.62,0.213 0,0 0)
204	LINESTRING(10 10,10 10,10 10,10 10,10 10)
205	LINESTRING(10 10,10 10,10 10,10 10,10 10)
206	LINESTRING(10 10,20 10,20 20,10 20,10 10)
207	LINESTRING(10 10,10 10,10 10,10 10,10 10)
208	LINESTRING(10 10,10 10,10 10,10 10,10 10)
209	LINESTRING(10 10,0 10,0 10)
210	LINESTRING(1e65 1e65,1e65 1e65,1e65 1e65)
Select fid, AsText(g) from gis_multi_line;
fid	AsText(g)
501	MULTILINESTRING((10 48,10 21,10 0),(16 0,16 23,16 48))
502	MULTILINESTRING((10 48,10 21,10 0))
503	MULTILINESTRING((1 2,3 5),(2 5,5 8,21 7))
504	MULTILINESTRING((10 48,10 21,10 0),(16 0,16 23,16 48))
505	MULTILINESTRING((10 48,10 21,10 0))
506	MULTILINESTRING((1 2,3 5),(2 5,5 8,21 7))
507	MULTILINESTRING((10 48,10 21,10 0),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48),(16 0,16 23,16 48))
508	MULTILINESTRING((10 48,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4,10 21,10 0,1 2,3 4))
509	MULTILINESTRING((1 2,3 5),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7),(2 5,5 8,21 7))
510	MULTILINESTRING((0 0,0 0,0 0),(0 0,0 0,0 0))
511	MULTILINESTRING((0 0,0 0,0 0))
512	MULTILINESTRING((0 0,0 0),(0 0,0 0,0 0))
#Checking the geometry types for the line and multiLine class 
select fid,GeometryType(g) from gis_line where g is not NULL;
fid	GeometryType(g)
201	LINESTRING
202	LINESTRING
203	LINESTRING
204	LINESTRING
205	LINESTRING
206	LINESTRING
207	LINESTRING
208	LINESTRING
209	LINESTRING
210	LINESTRING
select count(GeometryType(g)) FROM gis_line;
count(GeometryType(g))
10
select fid,GeometryType(g) from gis_multi_line where g is not NULL;
fid	GeometryType(g)
501	MULTILINESTRING
502	MULTILINESTRING
503	MULTILINESTRING
504	MULTILINESTRING
505	MULTILINESTRING
506	MULTILINESTRING
507	MULTILINESTRING
508	MULTILINESTRING
509	MULTILINESTRING
510	MULTILINESTRING
511	MULTILINESTRING
512	MULTILINESTRING
select count(GeometryType(g)) FROM gis_multi_line;
count(GeometryType(g))
12
#Checking the geometry types of some random Lines and MultiLines.
Select GeometryType(LineFromText('LINESTRING(0 0,1 0,2 0)'));
GeometryType(LineFromText('LINESTRING(0 0,1 0,2 0)'))
LINESTRING
Select GeometryType(LineStringFromText('LINESTRING(0 0,1 0,2 0)'));
GeometryType(LineStringFromText('LINESTRING(0 0,1 0,2 0)'))
LINESTRING
Select GeometryType(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))));
GeometryType(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))))
LINESTRING
Select GeometryType(MLineFromText('MULTILINESTRING((0 0,1 0,2 0))'));
GeometryType(MLineFromText('MULTILINESTRING((0 0,1 0,2 0))'))
MULTILINESTRING
Select GeometryType(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0),(2 0,1 0,0 0))'));
GeometryType(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0),(2 0,1 0,0 0))'))
MULTILINESTRING
Select GeometryType(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0))))));
GeometryType(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0))))))
MULTILINESTRING
#WKB data, little-endian format
select GeometryType(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040));
GeometryType(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040))
LINESTRING
select GeometryType(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF));
GeometryType(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF))
LINESTRING
select GeometryType(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445));
GeometryType(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445))
LINESTRING
select GeometryType(MLineFromWKB(0x01050000000100000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040));
GeometryType(MLineFromWKB(0x01050000000100000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004
MULTILINESTRING
select GeometryType(MLineFromWKB(0x01050000000200000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001020000000200000014AE47E17A14F2BF14AE47E17A14F23F19AA622AFD84BFBF19AA622AFD84BF3F));
GeometryType(MLineFromWKB(0x01050000000200000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004
MULTILINESTRING
select GeometryType(MLineFromWKB(0x01050000000300000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001020000000200000014AE47E17A14F2BF14AE47E17A14F23F19AA622AFD84BFBF19AA622AFD84BF3F0102000000020000005510F2A07CE90C440080E03779C341430000000084D79741003D9160E458F1C3));
GeometryType(MLineFromWKB(0x01050000000300000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004
MULTILINESTRING
#WKB data, big-endian format
select GeometryType(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000));
GeometryType(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000))
LINESTRING
select GeometryType(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000));
GeometryType(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000))
LINESTRING
select GeometryType(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C));
GeometryType(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C))
LINESTRING
select GeometryType(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000));
GeometryType(MLineFromWKB(0x00000000050000000200000000020000000300000000000000000000000000000000000000000000000040240000000000004024000000000000000000000000000000000000020000000300000000000000000000000000000000000000000000000040240000000000004024000000000
MULTILINESTRING
select GeometryType(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C37937E08000));
GeometryType(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B43958106254024000000000
MULTILINESTRING
select GeometryType(MLineFromWKB(0x0000000005000000020000000002000000035FB317E5EF3AB327E3A4B378469B67320000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C37937E08000));
GeometryType(MLineFromWKB(0x0000000005000000020000000002000000035FB317E5EF3AB327E3A4B378469B67320000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B43958106254024000000000
MULTILINESTRING
Select GeometryType(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'));
GeometryType(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'))
LINESTRING
Select GeometryType(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'));
GeometryType(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'))
LINESTRING
Select GeometryType(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))));
GeometryType(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))))
LINESTRING
Select GeometryType(MLineFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2))'));
GeometryType(MLineFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2))'))
MULTILINESTRING
Select GeometryType(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2),(0 -2,2 1,2 0, 1 0, 0 0))'));
GeometryType(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2),(0 -2,2 1,2 0, 1 0, 0 0))'))
MULTILINESTRING
Select GeometryType(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2))))));
GeometryType(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2))))))
MULTILINESTRING
Select GeometryType(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'));
GeometryType(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'))
LINESTRING
Select GeometryType(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'));
GeometryType(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'))
LINESTRING
Select GeometryType(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2), Point(5, 1), Point(1, -5)))));
GeometryType(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2), Point(5, 1), Point(1, -5)))))
LINESTRING
Select GeometryType(MLineFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))'));
GeometryType(MLineFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))'))
MULTILINESTRING
Select GeometryType(MultiLineStringFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5),(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))'));
GeometryType(MultiLineStringFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5),(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))'))
MULTILINESTRING
Select GeometryType(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2) ), LineString(Point(10, -2), Point(5, 1), Point(1, -5))))));
GeometryType(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2) ), LineString(Point(10, -2), Point(5, 1), Point(1, -5))))))
MULTILINESTRING
Select GeometryType(LineFromText('LINESTRING(.1 b, a -0, -0 ë)'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select GeometryType(LineStringFromText('LINESTRING(.1 b, a -0, -0 ë)'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select GeometryType(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')))));
GeometryType(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')))))
LINESTRING
Select GeometryType(MLineFromText('MULTILINESTRING((.1 b, a -0, -0 ë))'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select GeometryType(MultiLineStringFromText('MULTILINESTRING((.1 b, a -0, -0 ë),(.1 b, a -0, -0 ë))'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select GeometryType(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')), LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))));
GeometryType(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')), LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))))
MULTILINESTRING
Select GeometryType(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'));
GeometryType(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'))
LINESTRING
Select GeometryType(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'));
GeometryType(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'))
LINESTRING
Select GeometryType(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))));
GeometryType(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))))
LINESTRING
Select GeometryType(MLineFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'));
GeometryType(MLineFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'))
MULTILINESTRING
Select GeometryType(MultiLineStringFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000),(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'));
GeometryType(MultiLineStringFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000),(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'))
MULTILINESTRING
Select GeometryType(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')), LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000'))))));
GeometryType(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')), LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000
MULTILINESTRING
Select GeometryType(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')))));
GeometryType(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')))))
LINESTRING
Select GeometryType(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')), LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2'))))));
GeometryType(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')), LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2'))))))
MULTILINESTRING
Select GeometryType(LineFromText('LINESTRING(. ., 1 ~, ^ -000011111)'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select GeometryType(LineStringFromText('LINESTRING(. ., 1 ~, ^ -000011111)'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select GeometryType(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')))));
GeometryType(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')))))
LINESTRING
Select GeometryType(MLineFromText('MULTILINESTRING((. ., 1 ~, ^ -000011111))'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select GeometryType(MultiLineStringFromText('MULTILINESTRING((. ., 1 ~, ^ -000011111),(. ., 1 ~, ^ -000011111))'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select GeometryType(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')), LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111'))))));
GeometryType(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')), LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111'))))))
MULTILINESTRING
#Invalid WKB data
select GeometryType(0x01010000000200000000000000000000000000000000002440000000000000F03F0000000000000040);
ERROR HY000: Geometry byte string must be little endian.
select GeometryType(0x000000000400000002000000000000000040240000000000003FF00000000000004000000000000000);
ERROR HY000: Geometry byte string must be little endian.
select GeometryType(0x01020000000100000001020000000200000000000000000000000000000000002440000000000000F0BFD7A3703D0AD70140);
ERROR HY000: Geometry byte string must be little endian.
select GeometryType(0x00000000060000000100000000020000000200000000000000004024000000000000BFF00000000000004001D70A3D70A3D7);
ERROR HY000: Geometry byte string must be little endian.
#Checking the SRID for the line and multiLine class 
select fid,SRID(g) from gis_line where g is not NULL;
fid	SRID(g)
201	0
202	0
203	0
204	0
205	0
206	0
207	0
208	0
209	0
210	0
select count(SRID(g)) FROM gis_line;
count(SRID(g))
10
select fid,SRID(g) from gis_multi_line where g is not NULL;
fid	SRID(g)
501	0
502	0
503	0
504	0
505	0
506	0
507	0
508	0
509	0
510	0
511	0
512	0
select count(SRID(g)) FROM gis_multi_line;
count(SRID(g))
12
#Checking the SRID of some random Lines and MultiLines.
Select SRID(LineFromText('LINESTRING(0 0,1 0,2 0)'));
SRID(LineFromText('LINESTRING(0 0,1 0,2 0)'))
0
Select SRID(LineStringFromText('LINESTRING(0 0,1 0,2 0)'));
SRID(LineStringFromText('LINESTRING(0 0,1 0,2 0)'))
0
Select SRID(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))));
SRID(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))))
0
Select SRID(MLineFromText('MULTILINESTRING((0 0,1 0,2 0))'));
SRID(MLineFromText('MULTILINESTRING((0 0,1 0,2 0))'))
0
Select SRID(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0),(2 0,1 0,0 0))'));
SRID(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0),(2 0,1 0,0 0))'))
0
Select SRID(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0))))));
SRID(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0))))))
0
#WKB data, little-endian format
select SRID(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040));
SRID(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040))
0
select SRID(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF));
SRID(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF))
0
select SRID(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445));
SRID(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445))
0
select SRID(MLineFromWKB(0x01050000000100000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040));
SRID(MLineFromWKB(0x01050000000100000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040))
0
select SRID(MLineFromWKB(0x01050000000200000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001020000000200000014AE47E17A14F2BF14AE47E17A14F23F19AA622AFD84BFBF19AA622AFD84BF3F));
SRID(MLineFromWKB(0x01050000000200000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F000000000000000000000000000000400102000
0
select SRID(MLineFromWKB(0x01050000000300000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001020000000200000014AE47E17A14F2BF14AE47E17A14F23F19AA622AFD84BFBF19AA622AFD84BF3F0102000000020000005510F2A07CE90C440080E03779C341430000000084D79741003D9160E458F1C3));
SRID(MLineFromWKB(0x01050000000300000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F000000000000000000000000000000400102000
0
#WKB data, big-endian format
select SRID(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000));
SRID(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000))
0
select SRID(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000));
SRID(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000))
0
select SRID(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C));
SRID(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C))
0
select SRID(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000));
SRID(MLineFromWKB(0x0000000005000000020000000002000000030000000000000000000000000000000000000000000000004024000000000000402400000000000000000000000000000000000002000000030000000000000000000000000000000000000000000000004024000000000000402400000000000000000
0
select SRID(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C37937E08000));
SRID(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C
0
select SRID(MLineFromWKB(0x0000000005000000020000000002000000035FB317E5EF3AB327E3A4B378469B67320000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C37937E08000));
SRID(MLineFromWKB(0x0000000005000000020000000002000000035FB317E5EF3AB327E3A4B378469B67320000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C
0
Select SRID(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'));
SRID(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'))
0
Select SRID(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'));
SRID(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'))
0
Select SRID(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))));
SRID(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))))
0
Select SRID(MLineFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2))'));
SRID(MLineFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2))'))
0
Select SRID(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2),(0 -2,2 1,2 0, 1 0, 0 0))'));
SRID(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2),(0 -2,2 1,2 0, 1 0, 0 0))'))
0
Select SRID(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2))))));
SRID(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2))))))
0
Select SRID(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'));
SRID(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'))
0
Select SRID(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'));
SRID(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'))
0
Select SRID(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2), Point(5, 1), Point(1, -5)))));
SRID(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2), Point(5, 1), Point(1, -5)))))
0
Select SRID(MLineFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))'));
SRID(MLineFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))'))
0
Select SRID(MultiLineStringFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5),(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))'));
SRID(MultiLineStringFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5),(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))'))
0
Select SRID(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2) ), LineString(Point(10, -2), Point(5, 1), Point(1, -5))))));
SRID(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2) ), LineString(Point(10, -2), Point(5, 1), Point(1, -5))))))
0
Select SRID(LineFromText('LINESTRING(.1 b, a -0, -0 ë)'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select SRID(LineStringFromText('LINESTRING(.1 b, a -0, -0 ë)'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select SRID(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')))));
SRID(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')))))
0
Select SRID(MLineFromText('MULTILINESTRING((.1 b, a -0, -0 ë))'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select SRID(MultiLineStringFromText('MULTILINESTRING((.1 b, a -0, -0 ë),(.1 b, a -0, -0 ë))'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select SRID(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')), LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))));
SRID(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')), LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))))
0
Select SRID(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'));
SRID(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'))
0
Select SRID(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'));
SRID(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'))
0
Select SRID(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))));
SRID(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))))
0
Select SRID(MLineFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'));
SRID(MLineFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'))
0
Select SRID(MultiLineStringFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000),(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'));
SRID(MultiLineStringFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000),(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'))
0
Select SRID(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')), LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000'))))));
SRID(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')), LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000'))))))
0
Select SRID(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')))));
SRID(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')))))
0
Select SRID(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')), LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2'))))));
SRID(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')), LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2'))))))
0
Select SRID(LineFromText('LINESTRING(. ., 1 ~, ^ -000011111)'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select SRID(LineStringFromText('LINESTRING(. ., 1 ~, ^ -000011111)'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select SRID(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')))));
SRID(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')))))
0
Select SRID(MLineFromText('MULTILINESTRING((. ., 1 ~, ^ -000011111))'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select SRID(MultiLineStringFromText('MULTILINESTRING((. ., 1 ~, ^ -000011111),(. ., 1 ~, ^ -000011111))'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select SRID(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')), LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111'))))));
SRID(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')), LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111'))))))
0
Select SRID(LineFromText('LINESTRING(0 0,1 0,2 0)',0));
SRID(LineFromText('LINESTRING(0 0,1 0,2 0)',0))
0
Select SRID(LineStringFromText('LINESTRING(0 0,1 0,2 0)',1000));
SRID(LineStringFromText('LINESTRING(0 0,1 0,2 0)',1000))
1000
select SRID(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040,2000000));
SRID(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040,2000000))
2000000
select SRID(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C,123456789));
SRID(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C,123456789))
123456789
Select SRID(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0))),4294967295));
SRID(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0))),4294967295))
4294967295
Select SRID(MLineFromText('MULTILINESTRING((0 0,1 0,2 0))',0));
SRID(MLineFromText('MULTILINESTRING((0 0,1 0,2 0))',0))
0
select SRID(MLineFromWKB(0x01050000000200000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001020000000200000014AE47E17A14F2BF14AE47E17A14F23F19AA622AFD84BFBF19AA622AFD84BF3F,1000));
SRID(MLineFromWKB(0x01050000000200000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F000000000000000000000000000000400102000
1000
select SRID(MLineFromWKB(0x0000000005000000020000000002000000035FB317E5EF3AB327E3A4B378469B67320000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C37937E08000,123456789));
SRID(MLineFromWKB(0x0000000005000000020000000002000000035FB317E5EF3AB327E3A4B378469B67320000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C
123456789
Select SRID(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0),(2 0,1 0,0 0))',1048000000));
SRID(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0),(2 0,1 0,0 0))',1048000000))
1048000000
Select SRID(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0)))),4294967295));
SRID(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0)))),4294967295))
4294967295
Select SRID(LineFromText('LINESTRING(0 0,1 0,2 0)',-1));
SRID(LineFromText('LINESTRING(0 0,1 0,2 0)',-1))
4294967295
select SRID(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040,-1024));
SRID(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040,-1024))
4294966272
select SRID(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C,4294967296));
SRID(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C,4294967296))
0
Select SRID(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0))),429496729500));
SRID(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0))),429496729500))
4294967196
Select SRID(LineStringFromText('LINESTRING(0 0,1 0,2 0)',42949672956789));
SRID(LineStringFromText('LINESTRING(0 0,1 0,2 0)',42949672956789))
4294964085
Select SRID(MLineFromText('MULTILINESTRING((0 0,1 0,2 0))',-1));
SRID(MLineFromText('MULTILINESTRING((0 0,1 0,2 0))',-1))
4294967295
select SRID(MLineFromWKB(0x01050000000200000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001020000000200000014AE47E17A14F2BF14AE47E17A14F23F19AA622AFD84BFBF19AA622AFD84BF3F,-1024));
SRID(MLineFromWKB(0x01050000000200000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F000000000000000000000000000000400102000
4294966272
select SRID(MLineFromWKB(0x0000000005000000020000000002000000035FB317E5EF3AB327E3A4B378469B67320000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C37937E08000,4294967296));
SRID(MLineFromWKB(0x0000000005000000020000000002000000035FB317E5EF3AB327E3A4B378469B67320000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C
0
Select SRID(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0),(2 0,1 0,0 0))',1000000000000));
SRID(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0),(2 0,1 0,0 0))',1000000000000))
3567587328
#Invalid WKB data
select SRID(0x01010000000200000000000000000000000000000000002440000000000000F03F0000000000000040);
ERROR HY000: Geometry byte string must be little endian.
select SRID(0x000000000400000002000000000000000040240000000000003FF00000000000004000000000000000);
ERROR HY000: Geometry byte string must be little endian.
select SRID(0x01020000000100000001020000000200000000000000000000000000000000002440000000000000F0BFD7A3703D0AD70140);
ERROR HY000: Geometry byte string must be little endian.
select SRID(0x00000000060000000100000000020000000200000000000000004024000000000000BFF00000000000004001D70A3D70A3D7);
ERROR HY000: Geometry byte string must be little endian.
#Checking the Dimension for the line and multiLine class 
select fid,Dimension(g) from gis_line where g is not NULL;
fid	Dimension(g)
201	1
202	1
203	1
204	1
205	1
206	1
207	1
208	1
209	1
210	1
select count(Dimension(g)) FROM gis_line;
count(Dimension(g))
10
select fid,Dimension(g) from gis_multi_line where g is not NULL;
fid	Dimension(g)
501	1
502	1
503	1
504	1
505	1
506	1
507	1
508	1
509	1
510	1
511	1
512	1
select count(Dimension(g)) FROM gis_multi_line;
count(Dimension(g))
12
#Checking the Dimension of some random Lines and MultiLines.
Select Dimension(LineFromText('LINESTRING(0 0,1 0,2 0)'));
Dimension(LineFromText('LINESTRING(0 0,1 0,2 0)'))
1
Select Dimension(LineStringFromText('LINESTRING(0 0,1 0,2 0)'));
Dimension(LineStringFromText('LINESTRING(0 0,1 0,2 0)'))
1
Select Dimension(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))));
Dimension(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))))
1
Select Dimension(MLineFromText('MULTILINESTRING((0 0,1 0,2 0))'));
Dimension(MLineFromText('MULTILINESTRING((0 0,1 0,2 0))'))
1
Select Dimension(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0),(2 0,1 0,0 0))'));
Dimension(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0),(2 0,1 0,0 0))'))
1
Select Dimension(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0))))));
Dimension(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0))))))
1
#WKB data, little-endian format
select Dimension(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040));
Dimension(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040))
1
select Dimension(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF));
Dimension(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF))
1
select Dimension(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445));
Dimension(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445))
1
select Dimension(MLineFromWKB(0x01050000000100000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040));
Dimension(MLineFromWKB(0x01050000000100000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040))
1
select Dimension(MLineFromWKB(0x01050000000200000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001020000000200000014AE47E17A14F2BF14AE47E17A14F23F19AA622AFD84BFBF19AA622AFD84BF3F));
Dimension(MLineFromWKB(0x01050000000200000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001
1
select Dimension(MLineFromWKB(0x01050000000300000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001020000000200000014AE47E17A14F2BF14AE47E17A14F23F19AA622AFD84BFBF19AA622AFD84BF3F0102000000020000005510F2A07CE90C440080E03779C341430000000084D79741003D9160E458F1C3));
Dimension(MLineFromWKB(0x01050000000300000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001
1
#WKB data, big-endian format
select Dimension(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000));
Dimension(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000))
1
select Dimension(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000));
Dimension(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000))
1
select Dimension(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C));
Dimension(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C))
1
select Dimension(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000));
Dimension(MLineFromWKB(0x00000000050000000200000000020000000300000000000000000000000000000000000000000000000040240000000000004024000000000000000000000000000000000000020000000300000000000000000000000000000000000000000000000040240000000000004024000000000000
1
select Dimension(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C37937E08000));
Dimension(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B43958106254024000000000000
1
select Dimension(MLineFromWKB(0x0000000005000000020000000002000000035FB317E5EF3AB327E3A4B378469B67320000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C37937E08000));
Dimension(MLineFromWKB(0x0000000005000000020000000002000000035FB317E5EF3AB327E3A4B378469B67320000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B43958106254024000000000000
1
Select Dimension(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'));
Dimension(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'))
1
Select Dimension(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'));
Dimension(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'))
1
Select Dimension(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))));
Dimension(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))))
1
Select Dimension(MLineFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2))'));
Dimension(MLineFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2))'))
1
Select Dimension(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2),(0 -2,2 1,2 0, 1 0, 0 0))'));
Dimension(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2),(0 -2,2 1,2 0, 1 0, 0 0))'))
1
Select Dimension(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2))))));
Dimension(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2))))))
1
Select Dimension(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'));
Dimension(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'))
1
Select Dimension(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'));
Dimension(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'))
1
Select Dimension(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2), Point(5, 1), Point(1, -5)))));
Dimension(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2), Point(5, 1), Point(1, -5)))))
1
Select Dimension(MLineFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))'));
Dimension(MLineFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))'))
1
Select Dimension(MultiLineStringFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5),(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))'));
Dimension(MultiLineStringFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5),(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))'))
1
Select Dimension(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2) ), LineString(Point(10, -2), Point(5, 1), Point(1, -5))))));
Dimension(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2) ), LineString(Point(10, -2), Point(5, 1), Point(1, -5))))))
1
Select Dimension(LineFromText('LINESTRING(.1 b, a -0, -0 ë)'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select Dimension(LineStringFromText('LINESTRING(.1 b, a -0, -0 ë)'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select Dimension(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')))));
Dimension(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')))))
1
Select Dimension(MLineFromText('MULTILINESTRING((.1 b, a -0, -0 ë))'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select Dimension(MultiLineStringFromText('MULTILINESTRING((.1 b, a -0, -0 ë),(.1 b, a -0, -0 ë))'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select Dimension(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')), LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))));
Dimension(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')), LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))))
1
Select Dimension(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'));
Dimension(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'))
1
Select Dimension(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'));
Dimension(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'))
1
Select Dimension(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))));
Dimension(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))))
1
Select Dimension(MLineFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'));
Dimension(MLineFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'))
1
Select Dimension(MultiLineStringFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000),(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'));
Dimension(MultiLineStringFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000),(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'))
1
Select Dimension(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')), LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000'))))));
Dimension(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')), LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000'))
1
Select Dimension(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')))));
Dimension(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')))))
1
Select Dimension(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')), LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2'))))));
Dimension(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')), LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2'))))))
1
Select Dimension(LineFromText('LINESTRING(. ., 1 ~, ^ -000011111)'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select Dimension(LineStringFromText('LINESTRING(. ., 1 ~, ^ -000011111)'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select Dimension(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')))));
Dimension(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')))))
1
Select Dimension(MLineFromText('MULTILINESTRING((. ., 1 ~, ^ -000011111))'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select Dimension(MultiLineStringFromText('MULTILINESTRING((. ., 1 ~, ^ -000011111),(. ., 1 ~, ^ -000011111))'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select Dimension(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')), LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111'))))));
Dimension(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')), LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111'))))))
1
#Invalid WKB data
select Dimension(0x01010000000200000000000000000000000000000000002440000000000000F03F0000000000000040);
ERROR HY000: Geometry byte string must be little endian.
select Dimension(0x000000000400000002000000000000000040240000000000003FF00000000000004000000000000000);
ERROR HY000: Geometry byte string must be little endian.
select Dimension(0x01020000000100000001020000000200000000000000000000000000000000002440000000000000F0BFD7A3703D0AD70140);
ERROR HY000: Geometry byte string must be little endian.
select Dimension(0x00000000060000000100000000020000000200000000000000004024000000000000BFF00000000000004001D70A3D70A3D7);
ERROR HY000: Geometry byte string must be little endian.
#Checking the Envelope for the line and multiLine class 
select fid,AsText(Envelope(g)) from gis_line where g is not NULL;
fid	AsText(Envelope(g))
201	POLYGON((0 0,10 0,10 10,0 10,0 0))
202	POLYGON((0 0,0 0,0 0,0 0,0 0))
203	POLYGON((0 0,0.213 0,0.213 0.62,0 0.62,0 0))
204	POLYGON((10 10,10 10,10 10,10 10,10 10))
205	POLYGON((10 10,10 10,10 10,10 10,10 10))
206	POLYGON((10 10,20 10,20 20,10 20,10 10))
207	POLYGON((10 10,10 10,10 10,10 10,10 10))
208	POLYGON((10 10,10 10,10 10,10 10,10 10))
209	POLYGON((0 10,10 10,10 10,0 10,0 10))
210	POLYGON((1e65 1e65,1e65 1e65,1e65 1e65,1e65 1e65,1e65 1e65))
select count(Envelope(g)) FROM gis_line;
count(Envelope(g))
10
select fid,AsText(Envelope(g)) from gis_multi_line where g is not NULL;
fid	AsText(Envelope(g))
501	POLYGON((10 0,16 0,16 48,10 48,10 0))
502	POLYGON((10 0,10 0,10 48,10 48,10 0))
503	POLYGON((1 2,21 2,21 8,1 8,1 2))
504	POLYGON((10 0,16 0,16 48,10 48,10 0))
505	POLYGON((10 0,10 0,10 48,10 48,10 0))
506	POLYGON((1 2,21 2,21 8,1 8,1 2))
507	POLYGON((10 0,16 0,16 48,10 48,10 0))
508	POLYGON((1 0,10 0,10 48,1 48,1 0))
509	POLYGON((1 2,21 2,21 8,1 8,1 2))
510	POLYGON((0 0,0 0,0 0,0 0,0 0))
511	POLYGON((0 0,0 0,0 0,0 0,0 0))
512	POLYGON((0 0,0 0,0 0,0 0,0 0))
select count(Envelope(g)) FROM gis_multi_line;
count(Envelope(g))
12
#Checking the Envelope of some random Lines and MultiLines.
Select AsText(Envelope(LineFromText('LINESTRING(0 0,1 0,2 0)')));
AsText(Envelope(LineFromText('LINESTRING(0 0,1 0,2 0)')))
POLYGON((0 0,2 0,2 0,0 0,0 0))
Select AsText(Envelope(LineStringFromText('LINESTRING(0 0,1 0,2 0)')));
AsText(Envelope(LineStringFromText('LINESTRING(0 0,1 0,2 0)')))
POLYGON((0 0,2 0,2 0,0 0,0 0))
Select AsText(Envelope(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0))))));
AsText(Envelope(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0))))))
POLYGON((0 0,2 0,2 0,0 0,0 0))
Select AsText(Envelope(MLineFromText('MULTILINESTRING((0 0,1 0,2 0))')));
AsText(Envelope(MLineFromText('MULTILINESTRING((0 0,1 0,2 0))')))
POLYGON((0 0,2 0,2 0,0 0,0 0))
Select AsText(Envelope(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0),(2 0,1 0,0 0))')));
AsText(Envelope(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0),(2 0,1 0,0 0))')))
POLYGON((0 0,2 0,2 0,0 0,0 0))
Select AsText(Envelope(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0)))))));
AsText(Envelope(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0)))))))
POLYGON((0 0,2 0,2 0,0 0,0 0))
#WKB data, little-endian format
select AsText(Envelope(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040)));
AsText(Envelope(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040)))
POLYGON((0 0,2 0,2 2,0 2,0 0))
select AsText(Envelope(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF)));
AsText(Envelope(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF)))
POLYGON((-1.1123 -0.213,0.12312 -0.213,0.12312 1.123,-1.1123 1.123,-1.1123 -0.213))
select AsText(Envelope(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445)));
AsText(Envelope(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445)))
POLYGON((-1.1123 1.123,1e37 1.123,1e37 1e30,-1.1123 1e30,-1.1123 1.123))
select AsText(Envelope(MLineFromWKB(0x01050000000100000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040)));
AsText(Envelope(MLineFromWKB(0x01050000000100000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000
POLYGON((0 0,2 0,2 2,0 2,0 0))
select AsText(Envelope(MLineFromWKB(0x01050000000200000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001020000000200000014AE47E17A14F2BF14AE47E17A14F23F19AA622AFD84BFBF19AA622AFD84BF3F)));
AsText(Envelope(MLineFromWKB(0x01050000000200000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000
POLYGON((-1.13 0,2 0,2 2,-1.13 2,-1.13 0))
select AsText(Envelope(MLineFromWKB(0x01050000000300000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001020000000200000014AE47E17A14F2BF14AE47E17A14F23F19AA622AFD84BFBF19AA622AFD84BF3F0102000000020000005510F2A07CE90C440080E03779C341430000000084D79741003D9160E458F1C3)));
AsText(Envelope(MLineFromWKB(0x01050000000300000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000
POLYGON((-1.13 -2e19,6.666666666666666e19 -2e19,6.666666666666666e19 1e16,-1.13 1e16,-1.13 -2e19))
#WKB data, big-endian format
select AsText(Envelope(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000)));
AsText(Envelope(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000)))
POLYGON((0 0,10 0,10 10,0 10,0 0))
select AsText(Envelope(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000)));
AsText(Envelope(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000)))
POLYGON((-0.567 -10,0.213 -10,0.213 0.62,-0.567 0.62,-0.567 -10))
select AsText(Envelope(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C)));
AsText(Envelope(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C)))
POLYGON((-0.567 -1e222,1e173 -1e222,1e173 1e106,-0.567 1e106,-0.567 -1e222))
select AsText(Envelope(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000)));
AsText(Envelope(MLineFromWKB(0x00000000050000000200000000020000000300000000000000000000000000000000000000000000000040240000000000004024000000000000000000000000000000000000020000000300000000000000000000000000000000000000000000000040240000000000004024000000
POLYGON((0 0,10 0,10 10,0 10,0 0))
select AsText(Envelope(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C37937E08000)));
AsText(Envelope(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B43958106254024000000
POLYGON((0 -10,10 -10,10 1e16,0 1e16,0 -10))
select AsText(Envelope(MLineFromWKB(0x0000000005000000020000000002000000035FB317E5EF3AB327E3A4B378469B67320000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C37937E08000)));
AsText(Envelope(MLineFromWKB(0x0000000005000000020000000002000000035FB317E5EF3AB327E3A4B378469B67320000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B43958106254024000000
POLYGON((0 -1e172,1e153 -1e172,1e153 1e16,0 1e16,0 -1e172))
Select AsText(Envelope(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)')));
AsText(Envelope(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)')))
POLYGON((0 -2,2 -2,2 1,0 1,0 -2))
Select AsText(Envelope(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)')));
AsText(Envelope(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)')))
POLYGON((0 -2,2 -2,2 1,0 1,0 -2))
Select AsText(Envelope(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0), point(2, 1), point(0, -2))))));
AsText(Envelope(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0), point(2, 1), point(0, -2))))))
POLYGON((0 -2,2 -2,2 1,0 1,0 -2))
Select AsText(Envelope(MLineFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2))')));
AsText(Envelope(MLineFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2))')))
POLYGON((0 -2,2 -2,2 1,0 1,0 -2))
Select AsText(Envelope(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2),(0 -2,2 1,2 0, 1 0, 0 0))')));
AsText(Envelope(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2),(0 -2,2 1,2 0, 1 0, 0 0))')))
POLYGON((0 -2,2 -2,2 1,0 1,0 -2))
Select AsText(Envelope(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2)))))));
AsText(Envelope(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2)))))))
POLYGON((0 -2,2 -2,2 1,0 1,0 -2))
Select AsText(Envelope(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)')));
AsText(Envelope(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)')))
POLYGON((1 -5,10 -5,10 1,1 1,1 -5))
Select AsText(Envelope(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)')));
AsText(Envelope(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)')))
POLYGON((1 -5,10 -5,10 1,1 1,1 -5))
Select AsText(Envelope(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2), Point(5, 1), Point(1, -5))))));
AsText(Envelope(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2), Point(5, 1), Point(1, -5))))))
POLYGON((1 -5,10 -5,10 1,1 1,1 -5))
Select AsText(Envelope(MLineFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))')));
AsText(Envelope(MLineFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))')))
POLYGON((1 -5,10 -5,10 1,1 1,1 -5))
Select AsText(Envelope(MultiLineStringFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5),(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))')));
AsText(Envelope(MultiLineStringFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5),(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))')))
POLYGON((1 -5,10 -5,10 1,1 1,1 -5))
Select AsText(Envelope(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2) ), LineString(Point(10, -2), Point(5, 1), Point(1, -5)))))));
AsText(Envelope(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2) ), LineString(Point(10, -2), Point(5, 1), Point(1, -5)))))))
POLYGON((1 -5,10 -5,10 1,1 1,1 -5))
Select AsText(Envelope(LineFromText('LINESTRING(.1 b, a -0, -0 ë)')));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select AsText(Envelope(LineStringFromText('LINESTRING(.1 b, a -0, -0 ë)')));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select AsText(Envelope(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))));
AsText(Envelope(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))))
POLYGON((0 0,0.1 0,0.1 0,0 0,0 0))
Select AsText(Envelope(MLineFromText('MULTILINESTRING((.1 b, a -0, -0 ë))')));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select AsText(Envelope(MultiLineStringFromText('MULTILINESTRING((.1 b, a -0, -0 ë),(.1 b, a -0, -0 ë))')));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select AsText(Envelope(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')), LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')))))));
AsText(Envelope(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')), LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')))))))
POLYGON((0 0,0.1 0,0.1 0,0 0,0 0))
Select AsText(Envelope(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)')));
AsText(Envelope(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)')))
POLYGON((0.9999 0,634736.736354 0,634736.736354 7654.24251,0.9999 7654.24251,0.9999 0))
Select AsText(Envelope(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)')));
AsText(Envelope(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)')))
POLYGON((0.9999 0,634736.736354 0,634736.736354 7654.24251,0.9999 7654.24251,0.9999 0))
Select AsText(Envelope(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000'))))));
AsText(Envelope(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000'))))))
POLYGON((0.9999 0,634736.736354 0,634736.736354 7654.24251,0.9999 7654.24251,0.9999 0))
Select AsText(Envelope(MLineFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))')));
AsText(Envelope(MLineFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))')))
POLYGON((0.9999 0,634736.736354 0,634736.736354 7654.24251,0.9999 7654.24251,0.9999 0))
Select AsText(Envelope(MultiLineStringFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000),(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))')));
AsText(Envelope(MultiLineStringFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000),(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))')))
POLYGON((0.9999 0,634736.736354 0,634736.736354 7654.24251,0.9999 7654.24251,0.9999 0))
Select AsText(Envelope(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')), LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))))));
AsText(Envelope(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')), LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00
POLYGON((0.9999 0,634736.736354 0,634736.736354 7654.24251,0.9999 7654.24251,0.9999 0))
Select AsText(Envelope(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2'))))));
AsText(Envelope(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2'))))))
POLYGON((0.1 0,2 0,2 2,0.1 2,0.1 0))
Select AsText(Envelope(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')), LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')))))));
AsText(Envelope(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')), LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')))))))
POLYGON((0.1 0,2 0,2 2,0.1 2,0.1 0))
Select AsText(Envelope(LineFromText('LINESTRING(. ., 1 ~, ^ -000011111)')));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select AsText(Envelope(LineStringFromText('LINESTRING(. ., 1 ~, ^ -000011111)')));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select AsText(Envelope(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111'))))));
AsText(Envelope(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111'))))))
POLYGON((0 -11111,1 -11111,1 0,0 0,0 -11111))
Select AsText(Envelope(MLineFromText('MULTILINESTRING((. ., 1 ~, ^ -000011111))')));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select AsText(Envelope(MultiLineStringFromText('MULTILINESTRING((. ., 1 ~, ^ -000011111),(. ., 1 ~, ^ -000011111))')));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select AsText(Envelope(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')), LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')))))));
AsText(Envelope(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')), LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')))))))
POLYGON((0 -11111,1 -11111,1 0,0 0,0 -11111))
#Invalid WKB data
select AsText(Envelope(0x01010000000200000000000000000000000000000000002440000000000000F03F0000000000000040));
ERROR HY000: Geometry byte string must be little endian.
select AsText(Envelope(0x000000000400000002000000000000000040240000000000003FF00000000000004000000000000000));
ERROR HY000: Geometry byte string must be little endian.
select AsText(Envelope(0x01020000000100000001020000000200000000000000000000000000000000002440000000000000F0BFD7A3703D0AD70140));
ERROR HY000: Geometry byte string must be little endian.
select AsText(Envelope(0x00000000060000000100000000020000000200000000000000004024000000000000BFF00000000000004001D70A3D70A3D7));
ERROR HY000: Geometry byte string must be little endian.
#Checking the IsSimple for the line and multiLine class 
select fid,IsSimple(g) from gis_line where g is not NULL;
fid	IsSimple(g)
201	1
202	1
203	1
204	1
205	1
206	1
207	1
208	1
209	1
210	1
select count(IsSimple(g)) FROM gis_line;
count(IsSimple(g))
10
select fid,IsSimple(g) from gis_multi_line where g is not NULL;
fid	IsSimple(g)
501	1
502	1
503	1
504	1
505	1
506	1
507	1
508	0
509	0
510	1
511	1
512	1
select count(IsSimple(g)) FROM gis_multi_line;
count(IsSimple(g))
12
#Checking the IsSimple of some random Lines and MultiLines.
Select IsSimple(LineFromText('LINESTRING(0 0,1 0,2 0)'));
IsSimple(LineFromText('LINESTRING(0 0,1 0,2 0)'))
1
Select IsSimple(LineStringFromText('LINESTRING(0 0,1 0,2 0)'));
IsSimple(LineStringFromText('LINESTRING(0 0,1 0,2 0)'))
1
Select IsSimple(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))));
IsSimple(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))))
1
Select IsSimple(MLineFromText('MULTILINESTRING((0 0,1 0,2 0))'));
IsSimple(MLineFromText('MULTILINESTRING((0 0,1 0,2 0))'))
1
Select IsSimple(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0),(2 0,1 0,0 0))'));
IsSimple(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0),(2 0,1 0,0 0))'))
0
Select IsSimple(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0))))));
IsSimple(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0))))))
0
#WKB data, little-endian format
select IsSimple(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040));
IsSimple(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040))
0
select IsSimple(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF));
IsSimple(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF))
1
select IsSimple(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445));
IsSimple(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445))
1
select IsSimple(MLineFromWKB(0x01050000000100000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040));
IsSimple(MLineFromWKB(0x01050000000100000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040))
0
select IsSimple(MLineFromWKB(0x01050000000200000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001020000000200000014AE47E17A14F2BF14AE47E17A14F23F19AA622AFD84BFBF19AA622AFD84BF3F));
IsSimple(MLineFromWKB(0x01050000000200000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040010
0
select IsSimple(MLineFromWKB(0x01050000000300000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001020000000200000014AE47E17A14F2BF14AE47E17A14F23F19AA622AFD84BFBF19AA622AFD84BF3F0102000000020000005510F2A07CE90C440080E03779C341430000000084D79741003D9160E458F1C3));
IsSimple(MLineFromWKB(0x01050000000300000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040010
0
#WKB data, big-endian format
select IsSimple(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000));
IsSimple(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000))
1
select IsSimple(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000));
IsSimple(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000))
1
select IsSimple(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C));
IsSimple(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C))
1
select IsSimple(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000));
IsSimple(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000
0
select IsSimple(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C37937E08000));
IsSimple(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004
1
select IsSimple(MLineFromWKB(0x0000000005000000020000000002000000035FB317E5EF3AB327E3A4B378469B67320000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C37937E08000));
IsSimple(MLineFromWKB(0x0000000005000000020000000002000000035FB317E5EF3AB327E3A4B378469B67320000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004
1
Select IsSimple(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'));
IsSimple(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'))
0
Select IsSimple(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'));
IsSimple(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'))
0
Select IsSimple(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))));
IsSimple(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))))
1
Select IsSimple(MLineFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2))'));
IsSimple(MLineFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2))'))
0
Select IsSimple(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2),(0 -2,2 1,2 0, 1 0, 0 0))'));
IsSimple(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2),(0 -2,2 1,2 0, 1 0, 0 0))'))
0
Select IsSimple(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2))))));
IsSimple(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2))))))
0
Select IsSimple(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'));
IsSimple(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'))
0
Select IsSimple(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'));
IsSimple(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'))
0
Select IsSimple(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2), Point(5, 1), Point(1, -5)))));
IsSimple(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2), Point(5, 1), Point(1, -5)))))
0
Select IsSimple(MLineFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))'));
IsSimple(MLineFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))'))
0
Select IsSimple(MultiLineStringFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5),(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))'));
IsSimple(MultiLineStringFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5),(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))'))
0
Select IsSimple(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2) ), LineString(Point(10, -2), Point(5, 1), Point(1, -5))))));
IsSimple(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2) ), LineString(Point(10, -2), Point(5, 1), Point(1, -5))))))
0
Select IsSimple(LineFromText('LINESTRING(.1 b, a -0, -0 ë)'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select IsSimple(LineStringFromText('LINESTRING(.1 b, a -0, -0 ë)'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select IsSimple(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')))));
IsSimple(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')))))
1
Select IsSimple(MLineFromText('MULTILINESTRING((.1 b, a -0, -0 ë))'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select IsSimple(MultiLineStringFromText('MULTILINESTRING((.1 b, a -0, -0 ë),(.1 b, a -0, -0 ë))'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select IsSimple(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')), LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))));
IsSimple(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')), LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))))
1
Select IsSimple(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'));
IsSimple(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'))
1
Select IsSimple(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'));
IsSimple(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'))
1
Select IsSimple(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))));
IsSimple(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))))
1
Select IsSimple(MLineFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'));
IsSimple(MLineFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'))
1
Select IsSimple(MultiLineStringFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000),(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'));
IsSimple(MultiLineStringFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000),(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'))
1
Select IsSimple(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')), LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000'))))));
IsSimple(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')), LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))
1
Select IsSimple(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')))));
IsSimple(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')))))
1
Select IsSimple(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')), LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2'))))));
IsSimple(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')), LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2'))))))
1
Select IsSimple(LineFromText('LINESTRING(. ., 1 ~, ^ -000011111)'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select IsSimple(LineStringFromText('LINESTRING(. ., 1 ~, ^ -000011111)'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select IsSimple(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')))));
IsSimple(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')))))
1
Select IsSimple(MLineFromText('MULTILINESTRING((. ., 1 ~, ^ -000011111))'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select IsSimple(MultiLineStringFromText('MULTILINESTRING((. ., 1 ~, ^ -000011111),(. ., 1 ~, ^ -000011111))'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select IsSimple(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')), LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111'))))));
IsSimple(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')), LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111'))))))
0
#Invalid WKB data
select IsSimple(0x01010000000200000000000000000000000000000000002440000000000000F03F0000000000000040);
ERROR HY000: Geometry byte string must be little endian.
select IsSimple(0x000000000400000002000000000000000040240000000000003FF00000000000004000000000000000);
ERROR HY000: Geometry byte string must be little endian.
select IsSimple(0x01020000000100000001020000000200000000000000000000000000000000002440000000000000F0BFD7A3703D0AD70140);
ERROR HY000: Geometry byte string must be little endian.
select IsSimple(0x00000000060000000100000000020000000200000000000000004024000000000000BFF00000000000004001D70A3D70A3D7);
ERROR HY000: Geometry byte string must be little endian.
#Checking the IsClosed for the line and multiLine class 
select fid,IsClosed(g) from gis_line where g is not NULL;
fid	IsClosed(g)
201	0
202	1
203	0
204	1
205	1
206	1
207	1
208	1
209	0
210	1
select count(IsClosed(g)) FROM gis_line;
count(IsClosed(g))
10
select fid,IsClosed(g) from gis_multi_line where g is not NULL;
fid	IsClosed(g)
501	0
502	0
503	0
504	0
505	0
506	0
507	0
508	0
509	0
510	1
511	1
512	1
select count(IsClosed(g)) FROM gis_multi_line;
count(IsClosed(g))
12
#Checking the IsClosed of some random Lines and MultiLines.
Select IsClosed(LineFromText('LINESTRING(0 0,1 0,2 0)'));
IsClosed(LineFromText('LINESTRING(0 0,1 0,2 0)'))
0
Select IsClosed(LineStringFromText('LINESTRING(0 0,1 0,2 0)'));
IsClosed(LineStringFromText('LINESTRING(0 0,1 0,2 0)'))
0
Select IsClosed(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))));
IsClosed(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))))
0
Select IsClosed(MLineFromText('MULTILINESTRING((0 0,1 0,2 0))'));
IsClosed(MLineFromText('MULTILINESTRING((0 0,1 0,2 0))'))
0
Select IsClosed(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0),(2 0,1 0,0 0))'));
IsClosed(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0),(2 0,1 0,0 0))'))
0
Select IsClosed(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0))))));
IsClosed(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0))))))
0
#WKB data, little-endian format
select IsClosed(LineFromWKB(0x01020000000700000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004000000000000000000000000000000000));
IsClosed(LineFromWKB(0x01020000000700000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F000000000000000000000000000000400000000000000000000000
1
select IsClosed(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF));
IsClosed(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF))
0
select IsClosed(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445));
IsClosed(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445))
0
select IsClosed(MLineFromWKB(0x01050000000100000001020000000700000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004000000000000000000000000000000000));
IsClosed(MLineFromWKB(0x01050000000100000001020000000700000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040000
1
select IsClosed(MLineFromWKB(0x01050000000200000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001020000000200000014AE47E17A14F2BF14AE47E17A14F23F19AA622AFD84BFBF19AA622AFD84BF3F));
IsClosed(MLineFromWKB(0x01050000000200000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040010
0
select IsClosed(MLineFromWKB(0x01050000000300000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001020000000200000014AE47E17A14F2BF14AE47E17A14F23F19AA622AFD84BFBF19AA622AFD84BF3F0102000000020000005510F2A07CE90C440080E03779C341430000000084D79741003D9160E458F1C3));
IsClosed(MLineFromWKB(0x01050000000300000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040010
0
#WKB data, big-endian format
select IsClosed(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000));
IsClosed(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000))
0
select IsClosed(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000));
IsClosed(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000))
0
select IsClosed(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C));
IsClosed(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C))
0
select IsClosed(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000));
IsClosed(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000
0
select IsClosed(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C37937E08000));
IsClosed(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004
0
select IsClosed(MLineFromWKB(0x0000000005000000020000000002000000035FB317E5EF3AB327E3A4B378469B67320000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C37937E08000));
IsClosed(MLineFromWKB(0x0000000005000000020000000002000000035FB317E5EF3AB327E3A4B378469B67320000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004
0
Select IsClosed(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'));
IsClosed(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'))
0
Select IsClosed(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'));
IsClosed(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'))
0
Select IsClosed(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))));
IsClosed(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))))
0
Select IsClosed(MLineFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2))'));
IsClosed(MLineFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2))'))
0
Select IsClosed(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2),(0 -2,2 1,2 0, 1 0, 0 0))'));
IsClosed(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2),(0 -2,2 1,2 0, 1 0, 0 0))'))
0
Select IsClosed(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2))))));
IsClosed(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2))))))
0
Select IsClosed(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 0)'));
IsClosed(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 0)'))
1
Select IsClosed(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 0)'));
IsClosed(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 0)'))
1
Select IsClosed(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, 0)))));
IsClosed(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, 0)))))
1
Select IsClosed(MLineFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 0))'));
IsClosed(MLineFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 0))'))
1
Select IsClosed(MultiLineStringFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 0),(0 0, 10 0, 1 -1, 10 -1, 0 0))'));
IsClosed(MultiLineStringFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 0),(0 0, 10 0, 1 -1, 10 -1, 0 0))'))
1
Select IsClosed(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, 0) ), LineString(Point(10, -2), Point(5, 1), Point(10, -2))))));
IsClosed(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, 0) ), LineString(Point(10, -2), Point(5, 1), Point(10, -2))))))
1
Select IsClosed(LineFromText('LINESTRING(.1 b, a -0, -0 ë)'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select IsClosed(LineStringFromText('LINESTRING(.1 b, a -0, -0 ë)'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select IsClosed(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')))));
IsClosed(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')))))
0
Select IsClosed(MLineFromText('MULTILINESTRING((.1 b, a -0, -0 ë))'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select IsClosed(MultiLineStringFromText('MULTILINESTRING((.1 b, a -0, -0 ë),(.1 b, a -0, -0 ë))'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select IsClosed(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')), LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))));
IsClosed(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')), LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))))
0
Select IsClosed(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'));
IsClosed(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'))
0
Select IsClosed(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'));
IsClosed(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'))
0
Select IsClosed(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))));
IsClosed(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))))
0
Select IsClosed(MLineFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'));
IsClosed(MLineFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'))
0
Select IsClosed(MultiLineStringFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000),(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'));
IsClosed(MultiLineStringFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000),(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'))
0
Select IsClosed(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')), LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000'))))));
IsClosed(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')), LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))
0
Select IsClosed(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')))));
IsClosed(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')))))
0
Select IsClosed(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')), LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2'))))));
IsClosed(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')), LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2'))))))
0
Select IsClosed(LineFromText('LINESTRING(. ., 1 ~, ^ -000011111)'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select IsClosed(LineStringFromText('LINESTRING(. ., 1 ~, ^ -000011111)'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select IsClosed(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')))));
IsClosed(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')))))
0
Select IsClosed(MLineFromText('MULTILINESTRING((. ., 1 ~, ^ -000011111))'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select IsClosed(MultiLineStringFromText('MULTILINESTRING((. ., 1 ~, ^ -000011111),(. ., 1 ~, ^ -000011111))'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select IsClosed(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')), LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111'))))));
IsClosed(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')), LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111'))))))
0
#Invalid WKB data
select IsClosed(0x01010000000200000000000000000000000000000000002440000000000000F03F0000000000000040);
ERROR HY000: Geometry byte string must be little endian.
select IsClosed(0x000000000400000002000000000000000040240000000000003FF00000000000004000000000000000);
ERROR HY000: Geometry byte string must be little endian.
select IsClosed(0x01020000000100000001020000000200000000000000000000000000000000002440000000000000F0BFD7A3703D0AD70140);
ERROR HY000: Geometry byte string must be little endian.
select IsClosed(0x00000000060000000100000000020000000200000000000000004024000000000000BFF00000000000004001D70A3D70A3D7);
ERROR HY000: Geometry byte string must be little endian.
#Checking the EndPoint for the line class 
select fid,AsText(EndPoint(g)) from gis_line where g is not NULL;
fid	AsText(EndPoint(g))
201	POINT(10 0)
202	POINT(0 0)
203	POINT(0 0)
204	POINT(10 10)
205	POINT(10 10)
206	POINT(10 10)
207	POINT(10 10)
208	POINT(10 10)
209	POINT(0 10)
210	POINT(1e65 1e65)
select count(EndPoint(g)) FROM gis_line;
count(EndPoint(g))
10
#Checking the EndPoint of some random Lines.
Select AsText(EndPoint(LineFromText('LINESTRING(0 0,1 0,2 0)')));
AsText(EndPoint(LineFromText('LINESTRING(0 0,1 0,2 0)')))
POINT(2 0)
Select AsText(EndPoint(LineStringFromText('LINESTRING(0 0,1 0,2 0)')));
AsText(EndPoint(LineStringFromText('LINESTRING(0 0,1 0,2 0)')))
POINT(2 0)
Select AsText(EndPoint(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0))))));
AsText(EndPoint(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0))))))
POINT(2 0)
#WKB data, little-endian format
select AsText(EndPoint(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040)));
AsText(EndPoint(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040)))
POINT(0 2)
select AsText(EndPoint(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF)));
AsText(EndPoint(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF)))
POINT(0.12312 -0.213)
select AsText(EndPoint(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445)));
AsText(EndPoint(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445)))
POINT(1e29 1e26)
#WKB data, big-endian format
select AsText(EndPoint(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000)));
AsText(EndPoint(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000)))
POINT(10 0)
select AsText(EndPoint(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000)));
AsText(EndPoint(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000)))
POINT(-0.567 0)
select AsText(EndPoint(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C)));
AsText(EndPoint(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C)))
POINT(1e173 -1e222)
Select AsText(EndPoint(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)')));
AsText(EndPoint(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)')))
POINT(0 -2)
Select AsText(EndPoint(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)')));
AsText(EndPoint(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)')))
POINT(0 -2)
Select AsText(EndPoint(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(0, -2))))));
AsText(EndPoint(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(0, -2))))))
POINT(0 -2)
Select AsText(EndPoint(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)')));
AsText(EndPoint(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)')))
POINT(1 -5)
Select AsText(EndPoint(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)')));
AsText(EndPoint(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)')))
POINT(1 -5)
Select AsText(EndPoint(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2), Point(5, 1), Point(1, -5))))));
AsText(EndPoint(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2), Point(5, 1), Point(1, -5))))))
POINT(1 -5)
Select AsText(EndPoint(LineFromText('LINESTRING(.1 b, a -0, -0 ë)')));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select AsText(EndPoint(LineStringFromText('LINESTRING(.1 b, a -0, -0 ë)')));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select AsText(EndPoint(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))));
AsText(EndPoint(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))))
POINT(0 0)
Select AsText(EndPoint(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)')));
AsText(EndPoint(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)')))
POINT(9087.9097 0)
Select AsText(EndPoint(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)')));
AsText(EndPoint(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)')))
POINT(9087.9097 0)
Select AsText(EndPoint(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000'))))));
AsText(EndPoint(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000'))))))
POINT(9087.9097 0)
Select AsText(EndPoint(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2'))))));
AsText(EndPoint(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2'))))))
POINT(2 2)
Select AsText(EndPoint(LineFromText('LINESTRING(. ., 1 ~, ^ -000011111)')));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select AsText(EndPoint(LineStringFromText('LINESTRING(. ., 1 ~, ^ -000011111)')));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select AsText(EndPoint(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111'))))));
AsText(EndPoint(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111'))))))
POINT(0 -11111)
Select EndPoint(LineStringFromText('LINESTRING()'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select EndPoint(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))) = EndPoint(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, -0 0)'));
EndPoint(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))) = EndPoint(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, -0 0)'))
1
Select EndPoint(LineFromText('LINESTRING(0 0,1 0,2 0)')) = EndPoint(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 2 0)'));
EndPoint(LineFromText('LINESTRING(0 0,1 0,2 0)')) = EndPoint(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 2 0)'))
1
Select EndPoint(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)')) = EndPoint(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))));
EndPoint(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)')) = EndPoint(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))))
1
#Invalid WKB data
select AsText(EndPoint(0x01010000000200000000000000000000000000000000002440000000000000F03F0000000000000040));
ERROR HY000: Geometry byte string must be little endian.
select AsText(EndPoint(0x000000000400000002000000000000000040240000000000003FF00000000000004000000000000000));
ERROR HY000: Geometry byte string must be little endian.
#Checking the GLength for the line and multiLine class 
select fid,GLength(g) from gis_line where g is not NULL;
fid	GLength(g)
201	24.14213562373095
202	0
203	0.8685676929196556
204	0
205	0
206	40
207	0
208	0
209	10
210	0
select count(GLength(g)) FROM gis_line;
count(GLength(g))
10
#Checking the GLength for the line and multiLine class 
select fid,GLength(g) from gis_multi_line where g is not NULL;
fid	GLength(g)
501	96
502	48
503	23.87941150446467
504	96
505	48
506	23.87941150446467
507	20160
508	21044.609111881
509	3085.2323060835647
510	0
511	0
512	0
select count(GLength(g)) FROM gis_multi_line;
count(GLength(g))
12
#Checking the GLength of some random Lines and MultiLines.
Select GLength(LineFromText('LINESTRING(0 0,1 0,2 0)'));
GLength(LineFromText('LINESTRING(0 0,1 0,2 0)'))
2
Select GLength(LineStringFromText('LINESTRING(0 0,1 0,2 0)'));
GLength(LineStringFromText('LINESTRING(0 0,1 0,2 0)'))
2
Select GLength(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))));
GLength(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))))
2
Select GLength(MLineFromText('MULTILINESTRING((0 0,1 0,2 0))'));
GLength(MLineFromText('MULTILINESTRING((0 0,1 0,2 0))'))
2
Select GLength(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0),(2 0,1 0,0 0))'));
GLength(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0),(2 0,1 0,0 0))'))
4
Select GLength(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0))))));
GLength(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0))))))
4
#WKB data, little-endian format
select GLength(LineFromWKB(0x01020000000700000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004000000000000000000000000000000000));
GLength(LineFromWKB(0x01020000000700000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004000000000000000000000000
9.65685424949238
select GLength(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF));
GLength(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF))
1.8196589175996694
select GLength(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445));
GLength(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445))
1.99999999000001e37
select GLength(MLineFromWKB(0x01050000000100000001020000000700000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004000000000000000000000000000000000));
GLength(MLineFromWKB(0x01050000000100000001020000000700000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F000000000000000000000000000000400000
9.65685424949238
select GLength(MLineFromWKB(0x01050000000200000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001020000000200000014AE47E17A14F2BF14AE47E17A14F23F19AA622AFD84BFBF19AA622AFD84BF3F));
GLength(MLineFromWKB(0x01050000000200000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F000000000000000000000000000000400102
9.080793358533914
select GLength(MLineFromWKB(0x01050000000300000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F0000000000000000000000000000004001020000000200000014AE47E17A14F2BF14AE47E17A14F23F19AA622AFD84BFBF19AA622AFD84BF3F0102000000020000005510F2A07CE90C440080E03779C341430000000084D79741003D9160E458F1C3));
GLength(MLineFromWKB(0x01050000000300000001020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F000000000000000000000000000000400102
6.960491753052446e19
#WKB data, big-endian format
select GLength(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000));
GLength(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000))
24.14213562373095
select GLength(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000));
GLength(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000))
20.652509673578976
select GLength(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE000000000000000040F86A0000000000C0F86A0000000000));
GLength(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE000000000000000040F86A0000000000C0F86A0000000000))
141442.40967709632
select GLength(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000));
GLength(MLineFromWKB(0x0000000005000000020000000002000000030000000000000000000000000000000000000000000000004024000000000000402400000000000000000000000000000000000002000000030000000000000000000000000000000000000000000000004024000000000000402400000000000000
48.2842712474619
select GLength(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C37937E08000));
GLength(MLineFromWKB(0x000000000500000002000000000200000003000000000000000000000000000000000000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B4395810625402400000000000043
1.0000000000000024e16
select GLength(MLineFromWKB(0x0000000005000000020000000002000000035FB317E5EF3AB327E3A4B378469B67320000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B439581062540240000000000004341C37937E08000));
GLength(MLineFromWKB(0x0000000005000000020000000002000000035FB317E5EF3AB327E3A4B378469B67320000000000000000C0240000000000003FF05FD8ADAB9F560000000000000000000000000200000003000000000000000000000000000000000000000000000000BFF08B4395810625402400000000000043
NULL
Select GLength(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'));
GLength(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'))
6.60555127546399
Select GLength(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'));
GLength(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'))
6.60555127546399
Select GLength(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(0, -2)))));
GLength(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(0, -2)))))
3.23606797749979
Select GLength(MLineFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2))'));
GLength(MLineFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2))'))
6.60555127546399
Select GLength(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2),(0 0,1 0,2 0, 2 1, 0 -2))'));
GLength(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2),(0 0,1 0,2 0, 2 1, 0 -2))'))
13.21110255092798
Select GLength(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2))))));
GLength(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2) ), LineString(Point(0, 0), Point(1, 0), Point(2, 0), Point(2, 1), Point(0, -2))))))
13.21110255092798
Select GLength(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'));
GLength(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'))
58.15282472204811
Select GLength(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'));
GLength(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'))
58.15282472204811
Select GLength(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2), Point(5, 1), Point(1, -5)))));
GLength(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2), Point(5, 1), Point(1, -5)))))
58.15282472204811
Select GLength(MLineFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))'));
GLength(MLineFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))'))
58.15282472204811
Select GLength(MultiLineStringFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5),(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))'));
GLength(MultiLineStringFromText('MULTILINESTRING((1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5),(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5))'))
116.30564944409622
Select GLength(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2) ), LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2))))));
GLength(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2) ), LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2))))))
90.22154055254967
Select GLength(LineFromText('LINESTRING(0.1 b, a -0, -0 ë)'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select GLength(LineStringFromText('LINESTRING(.1 b, a -0, -0 ë)'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select GLength(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')))));
GLength(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')))))
0.1
Select GLength(MLineFromText('MULTILINESTRING((0.1 b, a -0, -0 ë))'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select GLength(MultiLineStringFromText('MULTILINESTRING((.1 b, a -0, -0 ë),(.1 b, a -0, -0 ë))'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select GLength(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë') ), LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))));
GLength(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë') ), LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))))
0.2
Select GLength(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'));
GLength(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'))
1260430.6992237852
Select GLength(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'));
GLength(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'))
1260430.6992237852
Select GLength(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))));
GLength(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))))
1260430.6992237852
Select GLength(MLineFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'));
GLength(MLineFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'))
1260430.6992237852
Select GLength(MultiLineStringFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000),(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'));
GLength(MultiLineStringFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000),(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'))
2520861.3984475704
Select GLength(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000') ), LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000'))))));
GLength(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000') ), LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))
2520861.3984475704
Select GLength(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')))));
GLength(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')))))
2.7595759670804663
Select GLength(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')), LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2'))))));
GLength(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')), LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2'))))))
5.5191519341609325
Select GLength(LineFromText('LINESTRING(. ., 1 ~, ^ -000011111)'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select GLength(LineStringFromText('LINESTRING(. ., 1 ~, ^ -000011111)'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select GLength(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')))));
GLength(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')))))
11112.00004500045
Select GLength(LineStringFromText('LINESTRING()'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select GLength(MLineFromText('MULTILINESTRING((. ., 1 ~, ^ -000011111))'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select GLength(MultiLineStringFromText('MULTILINESTRING((. ., 1 ~, ^ -000011111),(. ., 1 ~, ^ -000011111))'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select GLength(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')), LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111'))))));
GLength(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')), LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111'))))))
22224.0000900009
Select GLength(LineStringFromWKB(AsWKB(LineString(Point(0, 0))))) = GLength(LineFromText('LINESTRING(-0 0)'));
GLength(LineStringFromWKB(AsWKB(LineString(Point(0, 0))))) = GLength(LineFromText('LINESTRING(-0 0)'))
1
Select GLength(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))) = GLength(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, -0 0)'));
GLength(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))) = GLength(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, -0 0)'))
0
Select GLength(LineFromText('LINESTRING(0 0,1 0,2 0)')) = GLength(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 2 0)'));
GLength(LineFromText('LINESTRING(0 0,1 0,2 0)')) = GLength(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 2 0)'))
0
Select GLength(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)')) = GLength(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))));
GLength(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)')) = GLength(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))))
1
Select GLength(LineFromText('LINESTRING(0 0, 2 0, 2 2, 4 2, 4 4, 6 4)')) = GLength(LineStringFromText('LINESTRING(0 0, 0 -2, -2 -2, -4 -2, -4 -4, -4 -6)'));
GLength(LineFromText('LINESTRING(0 0, 2 0, 2 2, 4 2, 4 4, 6 4)')) = GLength(LineStringFromText('LINESTRING(0 0, 0 -2, -2 -2, -4 -2, -4 -4, -4 -6)'))
1
Select GLength(LineFromText('LINESTRING(1 2, 5 1.5, 1 1, 5 0.5, 1 0, 5 -0.5, 1 -1)')) = GLength(LineStringFromText('LINESTRING(0 0, 0.5 4, 1 0, 1.5 4, 2 0, 2.5 4, 3 0)'));
GLength(LineFromText('LINESTRING(1 2, 5 1.5, 1 1, 5 0.5, 1 0, 5 -0.5, 1 -1)')) = GLength(LineStringFromText('LINESTRING(0 0, 0.5 4, 1 0, 1.5 4, 2 0, 2.5 4, 3 0)'))
1
Select GLength(MLineFromText('MULTILINESTRING((1 0, 5 4, 0.2 5.3, -10 -0))')) = GLength(MultiLineStringFromText('MULTILINESTRING((1 0, 5 4, 0.2 5.3),(0.2 5.3, -10 -0))'));
GLength(MLineFromText('MULTILINESTRING((1 0, 5 4, 0.2 5.3, -10 -0))')) = GLength(MultiLineStringFromText('MULTILINESTRING((1 0, 5 4, 0.2 5.3),(0.2 5.3, -10 -0))'))
1
Select GLength(MultiLineStringFromText('MULTILINESTRING((0.99999 1, 360.000001 -0.4),(2.5 1.0, -0 -0))')) = GLength(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0.99999, 1), Point(360.000001, -0.4)), LineString(Point(-0, -0), Point(2.5, 1.0))))));
GLength(MultiLineStringFromText('MULTILINESTRING((0.99999 1, 360.000001 -0.4),(2.5 1.0, -0 -0))')) = GLength(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0.99999, 1), Point(360.000001, -0.4)), LineString(Point(-0, -0), Point(2.5, 1.0))))))
1
#Invalid WKB data
select GLength(0x01010000000200000000000000000000000000000000002440000000000000F03F0000000000000040);
ERROR HY000: Geometry byte string must be little endian.
select GLength(0x000000000400000002000000000000000040240000000000003FF00000000000004000000000000000);
ERROR HY000: Geometry byte string must be little endian.
select GLength(0x01020000000100000001020000000200000000000000000000000000000000002440000000000000F0BFD7A3703D0AD70140);
ERROR HY000: Geometry byte string must be little endian.
select GLength(0x00000000060000000100000000020000000200000000000000004024000000000000BFF00000000000004001D70A3D70A3D7);
ERROR HY000: Geometry byte string must be little endian.
#Checking the NumPoints for the line class 
select fid,NumPoints(g) from gis_line where g is not NULL;
fid	NumPoints(g)
201	3
202	3
203	3
204	5
205	5
206	5
207	5
208	5
209	3
210	3
select count(NumPoints(g)) FROM gis_line;
count(NumPoints(g))
10
#Checking the NumPoints of some random Lines 
Select NumPoints(LineFromText('LINESTRING(0 0,1 0,2 0)'));
NumPoints(LineFromText('LINESTRING(0 0,1 0,2 0)'))
3
Select NumPoints(LineStringFromText('LINESTRING(0 0,1 0,2 0)'));
NumPoints(LineStringFromText('LINESTRING(0 0,1 0,2 0)'))
3
Select NumPoints(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))));
NumPoints(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))))
3
#WKB data, little-endian format
select NumPoints(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040));
NumPoints(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040))
6
select NumPoints(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF));
NumPoints(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF))
2
select NumPoints(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445));
NumPoints(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445))
3
#WKB data, big-endian format
select NumPoints(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000));
NumPoints(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000))
3
select NumPoints(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000));
NumPoints(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000))
3
select NumPoints(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C));
NumPoints(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C))
4
Select NumPoints(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'));
NumPoints(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'))
5
Select NumPoints(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'));
NumPoints(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'))
5
Select NumPoints(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(0, -2)))));
NumPoints(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(0, -2)))))
3
Select NumPoints(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'));
NumPoints(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'))
8
Select NumPoints(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'));
NumPoints(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'))
8
Select NumPoints(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2), Point(5, 1), Point(1, -5)))));
NumPoints(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2), Point(5, 1), Point(1, -5)))))
8
Select NumPoints(LineFromText('LINESTRING(.1 b, a -0, -0 ë)'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select NumPoints(LineStringFromText('LINESTRING(.1 b, a -0, -0 ë)'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select NumPoints(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')))));
NumPoints(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')))))
3
Select NumPoints(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'));
NumPoints(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'))
3
Select NumPoints(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'));
NumPoints(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'))
3
Select NumPoints(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))));
NumPoints(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))))
3
Select NumPoints(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')))));
NumPoints(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')))))
3
Select NumPoints(LineFromText('LINESTRING(. ., 1 ~, ^ -000011111)'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select NumPoints(LineStringFromText('LINESTRING(. ., 1 ~, ^ -000011111)'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select NumPoints(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')))));
NumPoints(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')))))
3
Select NumPoints(LineStringFromText('LINESTRING()'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select NumPoints(LineStringFromWKB(AsWKB(LineString(Point(0, 0))))) = NumPoints(LineFromText('LINESTRING(-0 0)'));
NumPoints(LineStringFromWKB(AsWKB(LineString(Point(0, 0))))) = NumPoints(LineFromText('LINESTRING(-0 0)'))
1
Select NumPoints(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))) = NumPoints(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, -0 0)'));
NumPoints(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))) = NumPoints(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, -0 0)'))
0
Select NumPoints(LineFromText('LINESTRING(0 0,1 0,2 0)')) = NumPoints(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 2 0)'));
NumPoints(LineFromText('LINESTRING(0 0,1 0,2 0)')) = NumPoints(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 2 0)'))
0
Select NumPoints(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)')) = NumPoints(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))));
NumPoints(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)')) = NumPoints(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))))
1
Select NumPoints(LineFromText('LINESTRING(0 0, 2 0, 2 2, 4 2, 4 4, 6 4)')) = NumPoints(LineStringFromText('LINESTRING(0 0, 0 -2, -2 -2, -4 -2, -4 -4, -4 -6)'));
NumPoints(LineFromText('LINESTRING(0 0, 2 0, 2 2, 4 2, 4 4, 6 4)')) = NumPoints(LineStringFromText('LINESTRING(0 0, 0 -2, -2 -2, -4 -2, -4 -4, -4 -6)'))
1
Select NumPoints(LineFromText('LINESTRING(1 2, 5 1.5, 1 1, 5 0.5, 1 0, 5 -0.5, 1 -1)')) = NumPoints(LineStringFromText('LINESTRING(0 0, 0.5 4, 1 0, 1.5 4, 2 0, 2.5 4, 3 0)'));
NumPoints(LineFromText('LINESTRING(1 2, 5 1.5, 1 1, 5 0.5, 1 0, 5 -0.5, 1 -1)')) = NumPoints(LineStringFromText('LINESTRING(0 0, 0.5 4, 1 0, 1.5 4, 2 0, 2.5 4, 3 0)'))
1
#Invalid WKB data
select NumPoints(0x01010000000200000000000000000000000000000000002440000000000000F03F0000000000000040);
ERROR HY000: Geometry byte string must be little endian.
select NumPoints(0x000000000400000002000000000000000040240000000000003FF00000000000004000000000000000);
ERROR HY000: Geometry byte string must be little endian.
#Checking the PointN for the line class 
select fid,AsText(PointN(g, 3)) from gis_line where g is not NULL;
fid	AsText(PointN(g, 3))
201	POINT(10 0)
202	POINT(0 0)
203	POINT(0 0)
204	POINT(10 10)
205	POINT(10 10)
206	POINT(20 20)
207	POINT(10 10)
208	POINT(10 10)
209	POINT(0 10)
210	POINT(1e65 1e65)
select count(PointN(g, 1)) FROM gis_line;
count(PointN(g, 1))
10
#Checking the PointN of some random Lines.
Select AsText(PointN(LineFromText('LINESTRING(0 0,1 0,2 0)'), 3));
AsText(PointN(LineFromText('LINESTRING(0 0,1 0,2 0)'), 3))
POINT(2 0)
Select AsText(PointN(LineStringFromText('LINESTRING(0 0,1 0,2 0)'), 3));
AsText(PointN(LineStringFromText('LINESTRING(0 0,1 0,2 0)'), 3))
POINT(2 0)
Select AsText(PointN(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))), 3));
AsText(PointN(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0)))), 3))
POINT(2 0)
#WKB data, little-endian format
select AsText(PointN(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040),2));
AsText(PointN(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040),2))
POINT(1 1)
select AsText(PointN(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040),7));
AsText(PointN(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040),7))
NULL
select AsText(PointN(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF),2));
AsText(PointN(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF),2))
POINT(0.12312 -0.213)
select AsText(PointN(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445),3));
AsText(PointN(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445),3))
POINT(1e29 1e26)
select AsText(PointN(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445),4));
AsText(PointN(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445),4))
NULL
#WKB data, big-endian format
select AsText(PointN(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000),3));
AsText(PointN(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000),3))
POINT(10 0)
select AsText(PointN(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000),5));
AsText(PointN(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000),5))
NULL
select AsText(PointN(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C),3.4));
AsText(PointN(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C),3.4))
POINT(-0.567 1e106)
select AsText(PointN(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C),3.6));
AsText(PointN(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C),3.6))
POINT(1e173 -1e222)
Select AsText(PointN(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'), 5));
AsText(PointN(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'), 5))
POINT(0 -2)
Select AsText(PointN(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'), 5));
AsText(PointN(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)'), 5))
POINT(0 -2)
Select AsText(PointN(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(0, -2)))), 3));
AsText(PointN(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(0, -2)))), 3))
POINT(0 -2)
Select AsText(PointN(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'), 5));
AsText(PointN(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'), 5))
POINT(1 -2)
Select AsText(PointN(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'), 5));
AsText(PointN(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)'), 5))
POINT(1 -2)
Select AsText(PointN(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2), Point(5, 1), Point(1, -5)))), 5));
AsText(PointN(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2), Point(5, 1), Point(1, -5)))), 5))
POINT(1 -2)
Select AsText(PointN(LineFromText('LINESTRING(.1 b, a -0, -0 ë)'), 3));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select AsText(PointN(LineStringFromText('LINESTRING(.1 b, a -0, -0 ë)'), 3));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select AsText(PointN(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')))), 3));
AsText(PointN(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')))), 3))
POINT(0 0)
Select AsText(PointN(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'), 3));
AsText(PointN(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'), 3))
POINT(9087.9097 0)
Select AsText(PointN(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'), 3));
AsText(PointN(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'), 3))
POINT(9087.9097 0)
Select AsText(PointN(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))), 2));
AsText(PointN(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))), 2))
POINT(634736.736354 1.0987)
Select AsText(PointN(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')))), 1));
AsText(PointN(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2')))), 1))
POINT(0.1 0)
Select AsText(PointN(LineFromText('LINESTRING(. ., 1 ~, ^ -000011111)'), 2));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select AsText(PointN(LineStringFromText('LINESTRING(. ., 1 ~, ^ -000011111)'), 2));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select AsText(PointN(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')))), 2));
AsText(PointN(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')))), 2))
POINT(1 0)
Select PointN(LineStringFromText('LINESTRING()'), 1);
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select AsText(PointN(LineFromText('LINESTRING(0 0, 1 1, 2 2)'), 0));
AsText(PointN(LineFromText('LINESTRING(0 0, 1 1, 2 2)'), 0))
NULL
Select AsText(PointN(LineFromText('LINESTRING(0 0, 1 1, 2 2)'), -1));
AsText(PointN(LineFromText('LINESTRING(0 0, 1 1, 2 2)'), -1))
NULL
Select AsText(PointN(LineFromText('LINESTRING(0 0, 1 1, 2 2)'), 3-1));
AsText(PointN(LineFromText('LINESTRING(0 0, 1 1, 2 2)'), 3-1))
POINT(1 1)
Select AsText(PointN(LineFromText('LINESTRING(0 0, 1 1, 2 2)'), 2.5));
AsText(PointN(LineFromText('LINESTRING(0 0, 1 1, 2 2)'), 2.5))
POINT(2 2)
Select AsText(PointN(LineFromText('LINESTRING(0 0, 1 1, 2 2)'), 2.4));
AsText(PointN(LineFromText('LINESTRING(0 0, 1 1, 2 2)'), 2.4))
POINT(1 1)
Select PointN(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')))), 3) = PointN(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, -0 0)'), 5);
PointN(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')))), 3) = PointN(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, -0 0)'), 5)
1
Select PointN(LineFromText('LINESTRING(0 0,1 0,2 0)'), 2) = PointN(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 2 0)'), 2);
PointN(LineFromText('LINESTRING(0 0,1 0,2 0)'), 2) = PointN(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 2 0)'), 2)
1
Select PointN(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'), 3) = PointN(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))), 3);
PointN(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'), 3) = PointN(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))), 3)
1
#Invalid WKB data
select AsText(PointN(0x01010000000200000000000000000000000000000000002440000000000000F03F0000000000000040,2));
ERROR HY000: Geometry byte string must be little endian.
select AsText(PointN(0x000000000400000002000000000000000040240000000000003FF00000000000004000000000000000,5));
ERROR HY000: Geometry byte string must be little endian.
#Checking the StartPoint for the line class 
select fid,AsText(StartPoint(g)) from gis_line where g is not NULL;
fid	AsText(StartPoint(g))
201	POINT(0 0)
202	POINT(0 0)
203	POINT(0 0.62)
204	POINT(10 10)
205	POINT(10 10)
206	POINT(10 10)
207	POINT(10 10)
208	POINT(10 10)
209	POINT(10 10)
210	POINT(1e65 1e65)
select count(StartPoint(g)) FROM gis_line;
count(StartPoint(g))
10
#Checking the StartPoint of some random Lines.
Select AsText(StartPoint(LineFromText('LINESTRING(0 0,1 0,2 0)')));
AsText(StartPoint(LineFromText('LINESTRING(0 0,1 0,2 0)')))
POINT(0 0)
Select AsText(StartPoint(LineStringFromText('LINESTRING(0 0,1 0,2 0)')));
AsText(StartPoint(LineStringFromText('LINESTRING(0 0,1 0,2 0)')))
POINT(0 0)
Select AsText(StartPoint(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0))))));
AsText(StartPoint(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(2, 0))))))
POINT(0 0)
#WKB data, little-endian format
select AsText(StartPoint(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040)));
AsText(StartPoint(LineFromWKB(0x01020000000600000000000000000000000000000000000000000000000000F03F000000000000F03F0000000000000040000000000000004000000000000000400000000000000000000000000000F03F000000000000F03F00000000000000000000000000000040)))
POINT(0 0)
select AsText(StartPoint(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF)));
AsText(StartPoint(LineFromWKB(0x010200000002000000EB73B515FBCBF1BF2B8716D9CEF7F13FF7C77BD5CA84BF3FDD2406819543CBBF)))
POINT(-1.1123 1.123)
select AsText(StartPoint(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445)));
AsText(StartPoint(LineFromWKB(0x010200000003000000EB73B515FBCBF1BF2B8716D9CEF7F13F1B695743B8179E47EA8CA039593E294621D7E6FAE031F445350332B7F4AD5445)))
POINT(-1.1123 1.123)
#WKB data, big-endian format
select AsText(StartPoint(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000)));
AsText(StartPoint(LineFromWKB(0x000000000200000003000000000000000000000000000000000000000000000000402400000000000040240000000000000000000000000000)))
POINT(0 0)
select AsText(StartPoint(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000)));
AsText(StartPoint(LineFromWKB(0x00000000020000000300000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE0000000000000000)))
POINT(0 0.62)
select AsText(StartPoint(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C)));
AsText(StartPoint(LineFromWKB(0x00000000020000000400000000000000003FE3D70A3D70A3D73FCB4395810624DDC024000000000000BFE224DD2F1A9FBE55F170CB642B133F63D9E056584240FEEE0621B1C28AC20C)))
POINT(0 0.62)
Select AsText(StartPoint(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)')));
AsText(StartPoint(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)')))
POINT(0 0)
Select AsText(StartPoint(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)')));
AsText(StartPoint(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 0 -2)')))
POINT(0 0)
Select AsText(StartPoint(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(0, -2))))));
AsText(StartPoint(LineStringFromWKB(AsWKB(LineString(Point(0, 0), Point(1, 0), Point(0, -2))))))
POINT(0 0)
Select AsText(StartPoint(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)')));
AsText(StartPoint(LineFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)')))
POINT(1 0)
Select AsText(StartPoint(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)')));
AsText(StartPoint(LineStringFromText('LINESTRING(1 0, 10 0, 1 -1, 10 -1, 1 -2, 10 -2, 5 1, 1 -5)')))
POINT(1 0)
Select AsText(StartPoint(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2), Point(5, 1), Point(1, -5))))));
AsText(StartPoint(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2), Point(5, 1), Point(1, -5))))))
POINT(1 0)
Select AsText(StartPoint(LineFromText('LINESTRING(.1 b, a -0, -0 ë)')));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select AsText(StartPoint(LineStringFromText('LINESTRING(.1 b, a -0, -0 ë)')));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select AsText(StartPoint(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))));
AsText(StartPoint(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë'))))))
POINT(0.1 0)
Select AsText(StartPoint(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)')));
AsText(StartPoint(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)')))
POINT(0.9999 7654.24251)
Select AsText(StartPoint(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)')));
AsText(StartPoint(LineStringFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)')))
POINT(0.9999 7654.24251)
Select AsText(StartPoint(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000'))))));
AsText(StartPoint(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000'))))))
POINT(0.9999 7654.24251)
Select AsText(StartPoint(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2'))))));
AsText(StartPoint(LineStringFromWKB(AsWKB(LineString(Point('.1', '0'), Point('1', '1'), Point('2', '2'))))))
POINT(0.1 0)
Select AsText(StartPoint(LineFromText('LINESTRING(. ., 1 ~, ^ -000011111)')));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select AsText(StartPoint(LineStringFromText('LINESTRING(. ., 1 ~, ^ -000011111)')));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select AsText(StartPoint(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111'))))));
AsText(StartPoint(LineStringFromWKB(AsWKB(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111'))))))
POINT(0 0)
Select StartPoint(LineStringFromText('LINESTRING()'));
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
Select StartPoint(LineStringFromWKB(AsWKB(LineString(Point('q', 'b'), Point('a', '-0'), Point('-0', 'ë'))))) = StartPoint(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, -0 0)'));
StartPoint(LineStringFromWKB(AsWKB(LineString(Point('q', 'b'), Point('a', '-0'), Point('-0', 'ë'))))) = StartPoint(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, -0 0)'))
1
Select StartPoint(LineFromText('LINESTRING(0 0,1 0,2 0)')) = StartPoint(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 2 0)'));
StartPoint(LineFromText('LINESTRING(0 0,1 0,2 0)')) = StartPoint(LineStringFromText('LINESTRING(0 0,1 0,2 0, 2 1, 2 0)'))
1
Select StartPoint(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)')) = StartPoint(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))));
StartPoint(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)')) = StartPoint(LineStringFromWKB(AsWKB(LineString(Point('0.9999', '7654.24251'), Point('634736.736354', '1.0987'), Point('9087.9097', '00000')))))
1
#Invalid WKB data
select AsText(StartPoint(0x01010000000200000000000000000000000000000000002440000000000000F03F0000000000000040));
ERROR HY000: Geometry byte string must be little endian.
select AsText(StartPoint(0x000000000400000002000000000000000040240000000000003FF00000000000004000000000000000));
ERROR HY000: Geometry byte string must be little endian.
#check with procedures to work with the Attribute functions of Line and MultiLine class
#create procedure to check Attributes
CREATE PROCEDURE line_attri()
BEGIN
Select GeometryType(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2),(0 -2,2 1,2 0, 1 0, 0 0))'));
Select SRID(MultiLineStringFromText('MULTILINESTRING((.1 b, a -0, -0 ë),(.1 b, a -0, -0 ë))'));
Select Dimension(LineStringFromWKB(AsWKB(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2), Point(10, -2), Point(5, 1), Point(1, -5)))));
Select AsText(Envelope(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(1, 0), Point(10, 0), Point(1, -1), Point(10, -1), Point(1, -2) ), LineString(Point(10, -2), Point(5, 1), Point(1, -5)))))));
Select IsSimple(MultiLineStringFromText('MULTILINESTRING((0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000),(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000))'));
Select IsClosed(MLineFromWKB(AsWKB(MultiLineString(LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111')), LineString(Point('.', '.'), Point('1', '~'), Point('^', '-000011111'))))));
Select AsText(EndPoint(LineFromText('LINESTRING(.1 b, a -0, -0 ë)')));
Select GLength(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2),(0 0,1 0,2 0, 2 1, 0 -2))'));
Select GLength(MultiLineStringFromText('MULTILINESTRING((0.99999 1, 360.000001 -0.4),(2.5 1.0, -0 -0))')) = GLength(MLineFromWKB(AsWKB(MultiLineString(LineString(Point(0.99999, 1), Point(360.000001, -0.4)), LineString(Point(-0, -0), Point(2.5, 1.0))))));
Select NumPoints(LineFromText('LINESTRING(0.9999 7654.24251, 634736.736354 1.0987, 9087.9097 00000)'));
Select AsText(PointN(LineStringFromWKB(AsWKB(LineString(Point('.1', 'b'), Point('a', '-0'), Point('-0', 'ë')))), 3));
Select StartPoint(LineStringFromWKB(AsWKB(LineString(Point('q', 'b'), Point('a', '-0'), Point('-0', 'ë'))))) = StartPoint(LineFromText('LINESTRING(0 0,1 0,2 0, 2 1, -0 0)'));
END |
#call the proc
CALL line_attri;
GeometryType(MultiLineStringFromText('MULTILINESTRING((0 0,1 0,2 0, 2 1, 0 -2),(0 -2,2 1,2 0, 1 0, 0 0))'))
MULTILINESTRING
ERROR 22023: Invalid GIS data provided to function st_geometryfromtext.
#Dropping the created procedures.
drop procedure line_attri;
#Checking the Line and MultiLine properties from within the cursor 
CREATE PROCEDURE line_attri()
BEGIN
DECLARE v LINESTRING;
DECLARE c CURSOR FOR Select g from gis_line;
OPEN c;
FETCH c INTO v;
Select GeometryType(v);
Select SRID(v);
Select Dimension(v);
Select AsText(Envelope(v));
Select IsSimple(v);
Select IsClosed(v);
Select AsText(EndPoint(v));
Select GLength(v);
Select NumPoints(v);
Select AsText(PointN(v,1));
Select AsText(StartPoint(v));
CLOSE c;
END|
#Calling the cursor
CALL line_attri();
GeometryType(v)
LINESTRING
SRID(v)
0
Dimension(v)
1
AsText(Envelope(v))
POLYGON((0 0,10 0,10 10,0 10,0 0))
IsSimple(v)
1
IsClosed(v)
0
AsText(EndPoint(v))
POINT(10 0)
GLength(v)
24.14213562373095
NumPoints(v)
3
AsText(PointN(v,1))
POINT(0 0)
AsText(StartPoint(v))
POINT(0 0)
#Dropping the created cursor
drop procedure line_attri;
#Checking the Self join with the Line and MultiLine Attributes 
check self join
SELECT GeometryType(a.g), SRID(a.g), Dimension(a.g), IsSimple(a.g), IsClosed(a.g),
AsText(Envelope(a.g)), AsText(EndPoint(a.g)), AsText(StartPoint(a.g)), AsText(PointN(a.g,1)),
GLength(a.g), NumPoints(a.g)
FROM gis_line a,gis_line b WHERE GeometryType(a.g)=GeometryType(b.g) AND 
SRID(a.g)=SRID(b.g) AND Dimension(a.g)=Dimension(b.g) AND Envelope(a.g)=Envelope(b.g) AND 
IsSimple(a.g)=IsSimple(b.g) AND EndPoint(a.g)=EndPoint(b.g) AND StartPoint(a.g)=StartPoint(b.g)
AND PointN(a.g,1)=PointN(b.g,1) AND GLength(a.g)=GLength(b.g) AND NumPoints(a.g)=NumPoints(b.g);
GeometryType(a.g)	SRID(a.g)	Dimension(a.g)	IsSimple(a.g)	IsClosed(a.g)	AsText(Envelope(a.g))	AsText(EndPoint(a.g))	AsText(StartPoint(a.g))	AsText(PointN(a.g,1))	GLength(a.g)	NumPoints(a.g)
LINESTRING	0	1	1	0	POLYGON((0 0,10 0,10 10,0 10,0 0))	POINT(10 0)	POINT(0 0)	POINT(0 0)	24.14213562373095	3
LINESTRING	0	1	1	1	POLYGON((0 0,0 0,0 0,0 0,0 0))	POINT(0 0)	POINT(0 0)	POINT(0 0)	0	3
LINESTRING	0	1	1	0	POLYGON((0 0,0.213 0,0.213 0.62,0 0.62,0 0))	POINT(0 0)	POINT(0 0.62)	POINT(0 0.62)	0.8685676929196556	3
LINESTRING	0	1	1	1	POLYGON((10 10,10 10,10 10,10 10,10 10))	POINT(10 10)	POINT(10 10)	POINT(10 10)	0	5
LINESTRING	0	1	1	1	POLYGON((10 10,10 10,10 10,10 10,10 10))	POINT(10 10)	POINT(10 10)	POINT(10 10)	0	5
LINESTRING	0	1	1	1	POLYGON((10 10,10 10,10 10,10 10,10 10))	POINT(10 10)	POINT(10 10)	POINT(10 10)	0	5
LINESTRING	0	1	1	1	POLYGON((10 10,10 10,10 10,10 10,10 10))	POINT(10 10)	POINT(10 10)	POINT(10 10)	0	5
LINESTRING	0	1	1	1	POLYGON((10 10,10 10,10 10,10 10,10 10))	POINT(10 10)	POINT(10 10)	POINT(10 10)	0	5
LINESTRING	0	1	1	1	POLYGON((10 10,10 10,10 10,10 10,10 10))	POINT(10 10)	POINT(10 10)	POINT(10 10)	0	5
LINESTRING	0	1	1	1	POLYGON((10 10,10 10,10 10,10 10,10 10))	POINT(10 10)	POINT(10 10)	POINT(10 10)	0	5
LINESTRING	0	1	1	1	POLYGON((10 10,10 10,10 10,10 10,10 10))	POINT(10 10)	POINT(10 10)	POINT(10 10)	0	5
LINESTRING	0	1	1	1	POLYGON((10 10,20 10,20 20,10 20,10 10))	POINT(10 10)	POINT(10 10)	POINT(10 10)	40	5
LINESTRING	0	1	1	1	POLYGON((10 10,10 10,10 10,10 10,10 10))	POINT(10 10)	POINT(10 10)	POINT(10 10)	0	5
LINESTRING	0	1	1	1	POLYGON((10 10,10 10,10 10,10 10,10 10))	POINT(10 10)	POINT(10 10)	POINT(10 10)	0	5
LINESTRING	0	1	1	1	POLYGON((10 10,10 10,10 10,10 10,10 10))	POINT(10 10)	POINT(10 10)	POINT(10 10)	0	5
LINESTRING	0	1	1	1	POLYGON((10 10,10 10,10 10,10 10,10 10))	POINT(10 10)	POINT(10 10)	POINT(10 10)	0	5
LINESTRING	0	1	1	1	POLYGON((10 10,10 10,10 10,10 10,10 10))	POINT(10 10)	POINT(10 10)	POINT(10 10)	0	5
LINESTRING	0	1	1	1	POLYGON((10 10,10 10,10 10,10 10,10 10))	POINT(10 10)	POINT(10 10)	POINT(10 10)	0	5
LINESTRING	0	1	1	1	POLYGON((10 10,10 10,10 10,10 10,10 10))	POINT(10 10)	POINT(10 10)	POINT(10 10)	0	5
LINESTRING	0	1	1	1	POLYGON((10 10,10 10,10 10,10 10,10 10))	POINT(10 10)	POINT(10 10)	POINT(10 10)	0	5
LINESTRING	0	1	1	0	POLYGON((0 10,10 10,10 10,0 10,0 10))	POINT(0 10)	POINT(10 10)	POINT(10 10)	10	3
LINESTRING	0	1	1	1	POLYGON((1e65 1e65,1e65 1e65,1e65 1e65,1e65 1e65,1e65 1e65))	POINT(1e65 1e65)	POINT(1e65 1e65)	POINT(1e65 1e65)	0	3
#Checking the aggregate functions on the Line and MultiLine Attributes 
#Checking the SUM function
select SUM(GeometryType(g)) from gis_line where g is not NULL;
SUM(GeometryType(g))
0
select SUM(GeometryType(g)) from gis_multi_line where g is not NULL;
SUM(GeometryType(g))
0
select SUM(SRID(g)) from gis_line where g is not NULL;
SUM(SRID(g))
0
select SUM(SRID(g)) from gis_multi_line where g is not NULL;
SUM(SRID(g))
0
select SUM(Dimension(g)) from gis_line where g is not NULL;
SUM(Dimension(g))
10
select SUM(Dimension(g)) from gis_multi_line where g is not NULL;
SUM(Dimension(g))
12
select SUM(AsText(Envelope(g))) from gis_line where g is not NULL;
SUM(AsText(Envelope(g)))
0
select SUM(AsText(Envelope(g))) from gis_multi_line where g is not NULL;
SUM(AsText(Envelope(g)))
0
select SUM(IsSimple(g)) from gis_line where g is not NULL;
SUM(IsSimple(g))
10
select SUM(IsSimple(g)) from gis_multi_line where g is not NULL;
SUM(IsSimple(g))
10
select SUM(IsClosed(g)) from gis_line where g is not NULL;
SUM(IsClosed(g))
7
select SUM(IsClosed(g)) from gis_multi_line where g is not NULL;
SUM(IsClosed(g))
3
select SUM(AsText(EndPoint(g))) from gis_line where g is not NULL;
SUM(AsText(EndPoint(g)))
0
select SUM(GLength(g)) from gis_line where g is not NULL;
SUM(GLength(g))
75.0107033166506
select SUM(GLength(g)) from gis_multi_line where g is not NULL;
SUM(GLength(g))
44625.600240973494
select SUM(NumPoints(g)) from gis_line where g is not NULL;
SUM(NumPoints(g))
40
select SUM(AsText(PointN(g, 3))) from gis_line where g is not NULL;
SUM(AsText(PointN(g, 3)))
0
select SUM(AsText(StartPoint(g))) from gis_line where g is not NULL;
SUM(AsText(StartPoint(g)))
0
#Checking the MIN function
select MIN(GeometryType(g)) from gis_line where g is not NULL;
MIN(GeometryType(g))
LINESTRING
select MIN(GeometryType(g)) from gis_multi_line where g is not NULL;
MIN(GeometryType(g))
MULTILINESTRING
select MIN(SRID(g)) from gis_line where g is not NULL;
MIN(SRID(g))
0
select MIN(SRID(g)) from gis_multi_line where g is not NULL;
MIN(SRID(g))
0
select MIN(Dimension(g)) from gis_line where g is not NULL;
MIN(Dimension(g))
1
select MIN(Dimension(g)) from gis_multi_line where g is not NULL;
MIN(Dimension(g))
1
select MIN(AsText(Envelope(g))) from gis_line where g is not NULL;
MIN(AsText(Envelope(g)))
POLYGON((0 0,0 0,0 0,0 0,0 0))
select MIN(AsText(Envelope(g))) from gis_multi_line where g is not NULL;
MIN(AsText(Envelope(g)))
POLYGON((0 0,0 0,0 0,0 0,0 0))
select MIN(IsSimple(g)) from gis_line where g is not NULL;
MIN(IsSimple(g))
1
select MIN(IsSimple(g)) from gis_multi_line where g is not NULL;
MIN(IsSimple(g))
0
select MIN(IsClosed(g)) from gis_line where g is not NULL;
MIN(IsClosed(g))
0
select MIN(IsClosed(g)) from gis_multi_line where g is not NULL;
MIN(IsClosed(g))
0
select MIN(AsText(EndPoint(g))) from gis_line where g is not NULL;
MIN(AsText(EndPoint(g)))
POINT(0 0)
select MIN(GLength(g)) from gis_line where g is not NULL;
MIN(GLength(g))
0
select MIN(GLength(g)) from gis_multi_line where g is not NULL;
MIN(GLength(g))
0
select MIN(NumPoints(g)) from gis_line where g is not NULL;
MIN(NumPoints(g))
3
select MIN(AsText(PointN(g, 3))) from gis_line where g is not NULL;
MIN(AsText(PointN(g, 3)))
POINT(0 0)
select MIN(AsText(StartPoint(g))) from gis_line where g is not NULL;
MIN(AsText(StartPoint(g)))
POINT(0 0)
#Checking the MAX function
select MAX(GeometryType(g)) from gis_line where g is not NULL;
MAX(GeometryType(g))
LINESTRING
select MAX(GeometryType(g)) from gis_multi_line where g is not NULL;
MAX(GeometryType(g))
MULTILINESTRING
select MAX(SRID(g)) from gis_line where g is not NULL;
MAX(SRID(g))
0
select MAX(SRID(g)) from gis_multi_line where g is not NULL;
MAX(SRID(g))
0
select MAX(Dimension(g)) from gis_line where g is not NULL;
MAX(Dimension(g))
1
select MAX(Dimension(g)) from gis_multi_line where g is not NULL;
MAX(Dimension(g))
1
select MAX(AsText(Envelope(g))) from gis_line where g is not NULL;
MAX(AsText(Envelope(g)))
POLYGON((1e65 1e65,1e65 1e65,1e65 1e65,1e65 1e65,1e65 1e65))
select MAX(AsText(Envelope(g))) from gis_multi_line where g is not NULL;
MAX(AsText(Envelope(g)))
POLYGON((10 0,16 0,16 48,10 48,10 0))
select MAX(IsSimple(g)) from gis_line where g is not NULL;
MAX(IsSimple(g))
1
select MAX(IsSimple(g)) from gis_multi_line where g is not NULL;
MAX(IsSimple(g))
1
select MAX(IsClosed(g)) from gis_line where g is not NULL;
MAX(IsClosed(g))
1
select MAX(IsClosed(g)) from gis_multi_line where g is not NULL;
MAX(IsClosed(g))
1
select MAX(AsText(EndPoint(g))) from gis_line where g is not NULL;
MAX(AsText(EndPoint(g)))
POINT(1e65 1e65)
select MAX(GLength(g)) from gis_line where g is not NULL;
MAX(GLength(g))
40
select MAX(GLength(g)) from gis_multi_line where g is not NULL;
MAX(GLength(g))
21044.609111881
select MAX(NumPoints(g)) from gis_line where g is not NULL;
MAX(NumPoints(g))
5
select MAX(AsText(PointN(g, 3))) from gis_line where g is not NULL;
MAX(AsText(PointN(g, 3)))
POINT(20 20)
select MAX(AsText(StartPoint(g))) from gis_line where g is not NULL;
MAX(AsText(StartPoint(g)))
POINT(1e65 1e65)
#Checking the STD function
select STD(GeometryType(g)) from gis_line where g is not NULL;
STD(GeometryType(g))
0
select STD(GeometryType(g)) from gis_multi_line where g is not NULL;
STD(GeometryType(g))
0
select STD(SRID(g)) from gis_line where g is not NULL;
STD(SRID(g))
0
select STD(SRID(g)) from gis_multi_line where g is not NULL;
STD(SRID(g))
0
select STD(Dimension(g)) from gis_line where g is not NULL;
STD(Dimension(g))
0
select STD(Dimension(g)) from gis_multi_line where g is not NULL;
STD(Dimension(g))
0
select STD(AsText(Envelope(g))) from gis_line where g is not NULL;
STD(AsText(Envelope(g)))
0
select STD(AsText(Envelope(g))) from gis_multi_line where g is not NULL;
STD(AsText(Envelope(g)))
0
select STD(IsSimple(g)) from gis_line where g is not NULL;
STD(IsSimple(g))
0
select STD(IsSimple(g)) from gis_multi_line where g is not NULL;
STD(IsSimple(g))
0.37267799624996495
select STD(IsClosed(g)) from gis_line where g is not NULL;
STD(IsClosed(g))
0.45825756949558405
select STD(IsClosed(g)) from gis_multi_line where g is not NULL;
STD(IsClosed(g))
0.4330127018922193
select STD(AsText(EndPoint(g))) from gis_line where g is not NULL;
STD(AsText(EndPoint(g)))
0
select STD(GLength(g)) from gis_line where g is not NULL;
STD(GLength(g))
13.118447168418772
select STD(GLength(g)) from gis_multi_line where g is not NULL;
STD(GLength(g))
7598.740731390353
select STD(NumPoints(g)) from gis_line where g is not NULL;
STD(NumPoints(g))
1
select STD(AsText(PointN(g, 3))) from gis_line where g is not NULL;
STD(AsText(PointN(g, 3)))
0
select STD(AsText(StartPoint(g))) from gis_line where g is not NULL;
STD(AsText(StartPoint(g)))
0
#Checking the distinct function
select COUNT(DISTINCT(GeometryType(g))) from gis_line where g is not NULL;
COUNT(DISTINCT(GeometryType(g)))
1
select COUNT(DISTINCT(GeometryType(g))) from gis_multi_line where g is not NULL;
COUNT(DISTINCT(GeometryType(g)))
1
select COUNT(DISTINCT(SRID(g))) from gis_line where g is not NULL;
COUNT(DISTINCT(SRID(g)))
1
select COUNT(DISTINCT(SRID(g))) from gis_multi_line where g is not NULL;
COUNT(DISTINCT(SRID(g)))
1
select COUNT(DISTINCT(Dimension(g))) from gis_line where g is not NULL;
COUNT(DISTINCT(Dimension(g)))
1
select COUNT(DISTINCT(Dimension(g))) from gis_multi_line where g is not NULL;
COUNT(DISTINCT(Dimension(g)))
1
select COUNT(DISTINCT(AsText(Envelope(g)))) from gis_line where g is not NULL;
COUNT(DISTINCT(AsText(Envelope(g))))
7
select COUNT(DISTINCT(AsText(Envelope(g)))) from gis_multi_line where g is not NULL;
COUNT(DISTINCT(AsText(Envelope(g))))
5
select COUNT(DISTINCT(IsSimple(g))) from gis_line where g is not NULL;
COUNT(DISTINCT(IsSimple(g)))
1
select COUNT(DISTINCT(IsSimple(g))) from gis_multi_line where g is not NULL;
COUNT(DISTINCT(IsSimple(g)))
2
select COUNT(DISTINCT(IsClosed(g))) from gis_line where g is not NULL;
COUNT(DISTINCT(IsClosed(g)))
2
select COUNT(DISTINCT(IsClosed(g))) from gis_multi_line where g is not NULL;
COUNT(DISTINCT(IsClosed(g)))
2
select COUNT(DISTINCT(AsText(EndPoint(g)))) from gis_line where g is not NULL;
COUNT(DISTINCT(AsText(EndPoint(g))))
5
select COUNT(DISTINCT(GLength(g))) from gis_line where g is not NULL;
COUNT(DISTINCT(GLength(g)))
5
select COUNT(DISTINCT(GLength(g))) from gis_multi_line where g is not NULL;
COUNT(DISTINCT(GLength(g)))
7
select COUNT(DISTINCT(NumPoints(g))) from gis_line where g is not NULL;
COUNT(DISTINCT(NumPoints(g)))
2
select COUNT(DISTINCT(AsText(PointN(g, 3)))) from gis_line where g is not NULL;
COUNT(DISTINCT(AsText(PointN(g, 3))))
6
select COUNT(DISTINCT(AsText(StartPoint(g)))) from gis_line where g is not NULL;
COUNT(DISTINCT(AsText(StartPoint(g))))
4
#Checking the AVG function
select AVG(GeometryType(g)) from gis_line where g is not NULL;
AVG(GeometryType(g))
0
select AVG(GeometryType(g)) from gis_multi_line where g is not NULL;
AVG(GeometryType(g))
0
select AVG(SRID(g)) from gis_line where g is not NULL;
AVG(SRID(g))
0.0000
select AVG(SRID(g)) from gis_multi_line where g is not NULL;
AVG(SRID(g))
0.0000
select AVG(Dimension(g)) from gis_line where g is not NULL;
AVG(Dimension(g))
1.0000
select AVG(Dimension(g)) from gis_multi_line where g is not NULL;
AVG(Dimension(g))
1.0000
select AVG(AsText(Envelope(g))) from gis_line where g is not NULL;
AVG(AsText(Envelope(g)))
0
select AVG(AsText(Envelope(g))) from gis_multi_line where g is not NULL;
AVG(AsText(Envelope(g)))
0
select AVG(IsSimple(g)) from gis_line where g is not NULL;
AVG(IsSimple(g))
1.0000
select AVG(IsSimple(g)) from gis_multi_line where g is not NULL;
AVG(IsSimple(g))
0.8333
select AVG(IsClosed(g)) from gis_line where g is not NULL;
AVG(IsClosed(g))
0.7000
select AVG(IsClosed(g)) from gis_multi_line where g is not NULL;
AVG(IsClosed(g))
0.2500
select AVG(AsText(EndPoint(g))) from gis_line where g is not NULL;
AVG(AsText(EndPoint(g)))
0
select AVG(GLength(g)) from gis_line where g is not NULL;
AVG(GLength(g))
7.50107033166506
select AVG(GLength(g)) from gis_multi_line where g is not NULL;
AVG(GLength(g))
3718.8000200811243
select AVG(NumPoints(g)) from gis_line where g is not NULL;
AVG(NumPoints(g))
4.0000
select AVG(AsText(PointN(g, 3))) from gis_line where g is not NULL;
AVG(AsText(PointN(g, 3)))
0
select AVG(AsText(StartPoint(g))) from gis_line where g is not NULL;
AVG(AsText(StartPoint(g)))
0
#Final Cleanup
DROP TABLE IF EXISTS gis_line, gis_multi_line;
