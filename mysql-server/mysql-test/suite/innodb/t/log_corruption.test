--source include/have_innodb.inc

--echo # Test a corrupted MLOG_FILE_NAME record.

let newdir= $MYSQLTEST_VARDIR/tmp/innodb-log-debug;
--exec echo "wait" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect

--mkdir $newdir
let SEARCH_FILE = $newdir/my_restart.err;
--exec unzip $MYSQL_TEST_DIR/suite/innodb/t/log_corruption.zip -d $newdir > $SEARCH_FILE
let $args=--no-defaults --datadir=$newdir --loose-console > $SEARCH_FILE 2>&1 ;
# On Windows, the server seems to return 0 when an InnoDB assertion fails.
--error 0,1
--exec $MYSQLD $args
let SEARCH_PATTERN=InnoDB: ############### CORRUPT LOG RECORD FOUND ##################;
--source include/search_pattern_in_file.inc
let SEARCH_PATTERN=InnoDB: Log record type 55, page 151:488\. Log parsing proceeded successfully up to 1213973\. Previous log record type 56, is multi 0 Recv offset 9, prev 0;
--source include/search_pattern_in_file.inc
let SEARCH_PATTERN=InnoDB: Hex dump starting 0 bytes before and ending 13 bytes after the corrupted record;
--source include/search_pattern_in_file.inc
let SEARCH_PATTERN= len 22. hex 38000000000012860cb7809781e80006626f67757300. asc 8               bogus ;
--source include/search_pattern_in_file.inc
let SEARCH_PATTERN=InnoDB: Set innodb_force_recovery to ignore this error;
--source include/search_pattern_in_file.inc

--remove_file $SEARCH_FILE
--remove_file $newdir/ibdata1
--remove_file $newdir/ib_logfile0
--remove_file $newdir/ib_logfile1
--rmdir $newdir
