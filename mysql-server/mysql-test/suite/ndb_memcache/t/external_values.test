# The include statement below is a temp one for tests that are yet to
#be ported to run with InnoDB,
#but needs to be kept for tests that would need MyISAM in future.
--source include/force_myisam_default.inc

--source include/have_ndb.inc
--source suite/ndb_memcache/include/have_memcache.inc
--source suite/ndb_memcache/include/misc_tables.inc

--perl

use strict;
use lib "lib/";
use My::Memcache;

my $port = $ENV{NDB_MEMCACHED_1_PORT} or die "Need NDB_MEMCACHED_1_PORT";

my $mc = My::Memcache->new();
my $r = $mc->connect("localhost",$port);

if($r == 0) {
  print STDERR "DID NOT CONNECT TO MEMCACHE AT PORT $port \n";
}

# Here are some values
our $val_50 = "ABCDEFGHIJKLMNOPQRSTabcdefghijklmnopqrst123456789_";
our $val_40 = "Riga,Stockholm,Helsinki,Oslo,Copenhagen_";
our $val_100k = $val_50 x 2000;
our $val_60k  = $val_40 x 1500;
our $val_13949 = "." x 13949;


my $mcBin = My::Memcache::Binary->new();
$mcBin->connect("localhost", $port);

run_test($mc);       # Test with ASCII protocol
run_test($mcBin);    # Test with binary protocol



sub run_test() {
  my $mc = shift;
  
  # Flush all
  $mc->flush();

  # Do two INSERTS.  The first should succeed, the second should fail.
  if(! ($mc->add("b:long_val_1", $val_100k))) {
    $mc->stats("log");  # Hack to force server's error log to flush
    Carp::confess("Failed insert: t1");
  }
  $mc->add("b:long_val_1", $val_100k)  &&  Carp::confess("Insert should fail: t1");

  # Do two DELETES.  The first should succeed, the second should fail.
  $mc->delete("b:long_val_1")  || Carp::confess("Failed delete: t2");
  $mc->delete("b:long_val_1")  && Carp::confess("Delete should fail: t2");

  # Do an insert, then a read, then a delete, then a read
  $mc->add("b:long_val_2", $val_100k)     || Carp::confess("Failed insert: t3");
  ($mc->get("b:long_val_2") == $val_100k) || Carp::confess("GET results unexpected: t3");
  $mc->delete("b:long_val_2")             || Carp::confess("Failed delete: t3");
  $mc->get("b:long_val_2")                && Carp::confess("GET should fail: t3");

  # INSERT, read, and delete a short value 
  $mc->add("b:short", $val_40);
  ($mc->get("b:short") == $val_40)    || Carp::confess("GET results unexpected");
  $mc->delete("b:short")              || Carp::confess("delete failed");

  # Insert using SET.  Then read.  Then attempt an ADD, which should fail.
  # Short values
  $mc->set("b:test_short_set", "Mikrokosmos");
  ($mc->get("b:test_short_set") == "Mikrokosmos" ) || Carp::confess("GET fail");
  $mc->add("b:test_short_set", "!!") && Carp::confess("ADD should fail");
  # Long values
  $mc->set("b:test_set", $val_60k)     || Carp::confess("Failed SET as insert: t4");
  ($mc->get("b:test_set") == $val_60k) || Carp::confess("GET results unexpected: t4");
  $mc->add("b:test_set", $val_100k)    && Carp::confess("ADD should fail");

  # UPDATE via SET from a long value to a long value
  $mc->set("b:test_set", $val_100k)     || Carp::confess("Failed SET as update:t5");
  ($mc->get("b:test_set") == $val_100k) || Carp::confess("GET results unexpected:t5");

  # UPDATE via REPLACE from a long value to a long value
  $mc->replace("b:test_set", $val_13949) || Carp::confess("failed REPLACE");
  ($mc->get("b:test_set") == $val_13949) || Carp::confess("results unexpected");

  # REPLACE of non-existing value should fail
  $mc->replace("b:test_626", $val_60k) && Carp::confess("REPLACE should fail");

  # UPDATE via SET from a short value to a long value 
  $mc->add("b:test7", $val_40)        || Carp::confess("Failed insert: t7");
  ($mc->get("b:test7") == $val_40)    || Carp::confess("GET results unexpected: t7");
  $mc->set("b:test7", $val_100k)      || Carp::confess("Failed update: t7");
  ($mc->get("b:test7") == $val_100k)  || Carp::confess("GET results unexpected: t7");

  # UPDATE via SET from a long value to a short value
  $mc->set("b:test7", $val_50);
  ($mc->get("b:test7") == $val_50) || Carp::confess("results unexpected");

  # UPDATE via SET from a short value to a short value
  $mc->set("b:test7", $val_40);
  ($mc->get("b:test7") == $val_40) || Carp::confess("results unexpected");

  # Updates via REPLACE
  $mc->add("b:r", "a / a / a / a /");
  ($mc->get("b:r") == "a / a / a / a /") || Carp::confess("results unexpected");

  $mc->replace("b:r", $val_60k)  || Carp::confess("failed REPLACE");
  $mc->replace("b:r", $val_50)   || Carp::confess("failed REPLACE");
  ($mc->get("b:r") == $val_50)   || Carp::confess("results unexpected");


  ################## APPEND and PREPEND tests 

  # Inline values
  $mc->set("test8", $val_50);
  $mc->prepend("test8", $val_40);
  $mc->append("test8", $val_40);
  my $r0 = $mc->get("test8");
  ($r0 == $val_40 . $val_50 . $val_40)  || Carp::confess("results unexpected");

  # APPEND/PREPEND to empty inline value should fail
  $mc->append("empty", $val_40)  && Carp::confess("append should fail");
  $mc->prepend("empty", $val_40)  && Carp::confess("prepend should fail");

  # APPEND/PREPEND to empty externalizable value should fail
  $mc->append("b:empty", $val_40)  && Carp::confess("append should fail");
  $mc->append("b:empty", $val_60k)  && Carp::confess("append should fail");
  $mc->prepend("b:empty", $val_40)  && Carp::confess("prepend should fail");
  $mc->prepend("b:empty", $val_60k)  && Carp::confess("prepend should fail");
    
  # Externalizable (but short) values 
  $mc->set("b:test8", $val_50);
  $mc->prepend("b:test8", $val_40);
  $mc->append("b:test8", $val_40);
  my $r1 = $mc->get("b:test8");
  ($r1 == $val_40 . $val_50 . $val_40)  || Carp::confess("results unexpected");

  # Now make it long
  $mc->append("b:test8", $val_60k) || Carp::confess("append failed");
  my $r2 = $mc->get("b:test8");
  ($r2 == $1 . $val_60k) || Carp::confess("results unexpected");

  # Prepend to a long value 
  my $saying = "Elephants have trunks. ";
  $mc->prepend("b:test8", $saying) || Carp::confess("prepend failed");
  my $r3 = $mc->get("b:test8");
  ($r3 == $saying . $r2) || Carp::confess("results unexpected");

  # Now append a very large value to it 
  $mc->append("b:test8", $val_100k) || Carp::confess("append failed");
  my $r4 = $mc->get("b:test8");
  ($r4 == $r3 . $val_100k) || Carp::confess("results unexpected"); 

  # Take a value 1 less than a complete part, and append one character to it
  # This tests the "update-only" optimization in append
  $mc->set("b:test8c", $val_13949) || Carp::confess("set failed");
  $mc->append("b:test8c", "!");
  my $r1 = $mc->get("b:test8c");
  ($r1 == $val_13949 . "!")    ||  Carp::confess("results unexpected"); 

  # Now append one more character.  This tests the "insert-only" optimization.
  $mc->append("b:test8c", "?");
  my $r2 = $mc->get("b:test8c");
  ($r2 == $val_13949 . "!?")    ||  Carp::confess("results unexpected"); 

  # APPEND stress test.  This uses non-logging tables.
  $mc->add("bxx:t9", $val_50);
  for my $i (2 .. 300) {
    $mc->append("bxx:t9", $val_50);
    my $r = $mc->get("bxx:t9");
    ($r == $val_50 x $i) || Carp::confess("results unexpected");
  } 
    
  # PREPEND stress test.  This uses non-logging tables.
  $mc->add("bxx:t10", $val_50);
  for my $i (2 .. 300) {
    $mc->prepend("bxx:t10", $val_50);
    my $r = $mc->get("bxx:t10");
    ($r == $val_50 x $i) || Carp::confess("results unexpected");
  } 

  # DISABLED.
  # Debug output shows this being sent from memcached core to ndb engine
  # as a "delete" rather than a "set", probably revealing a bug there 
  # which we should investigate.
  #
  ## VALUE TOO LARGE
  #my $val_too_big = "x" x ((1024 * 1024) + 1);
  #$mc->set("b:testtoobig", $val_too_big);
  #$mc->{error} =~ "VALUE_TOO_LARGE" || Carp::confess "Expected TOO_LARGE";
}



EOF
USE ndbmemcache;
SELECT mkey, string_value, ext_size, SUM(length(content)) AS total_parts
  FROM demo_table_large t1
  JOIN external_values  t2 ON (t1.ext_id = t2.id) 
  GROUP BY mkey, string_value, ext_size;
SELECT mkey, string_value, ext_size, SUM(length(content)) AS total_parts
  FROM large_nolog t1
  JOIN  external_nolog t2 ON (t1.ext_id = t2.id) 
  GROUP BY mkey, string_value, ext_size;
