# WL6402: Non blocking show slave status
#
# Add a option to "SHOW SLAVE STATUS" command that when used,
# "SHOW SLAVE STATUS NONBLOCKING" returns immediately instead of
# blocking when run locks hold by "STOP SLAVE".
#

# This test do not depends on any binlog format, so testing it with
# mixed is enough.
--source include/no_valgrind_without_big.inc
--source include/have_binlog_format_mixed.inc
--source include/master-slave.inc

--echo [connection slave]
--connection slave
--let $saved_log_error_verbosity= `SELECT @@global.log_error_verbosity`

--echo #######################################################################
--echo # SHOW SLAVE STATUS NONBLOCKING is not allowed within a function.
DELIMITER |;

--error ER_SP_NO_RETSET
CREATE FUNCTION func1(arg TEXT) RETURNS TEXT
BEGIN
  SHOW SLAVE STATUS NONBLOCKING;
  RETURN arg;
END|

delimiter ;|

--echo #######################################################################
--echo # Testing if a user without REPLICATION CLIENT and SUPER privilege can
--echo # execute SHOW SLAVE STATUS NONBLOCKING.
CREATE USER mysqltest_1@localhost;
SHOW GRANTS FOR mysqltest_1@localhost;

--connect(user1,127.0.0.1,mysqltest_1,,,$SLAVE_MYPORT)
--connection user1
--error ER_SPECIFIC_ACCESS_DENIED_ERROR
SHOW SLAVE STATUS NONBLOCKING;

--connection slave
--disconnect user1
DROP USER 'mysqltest_1'@'localhost';

--echo #######################################################################
--echo # Testing if a user with REPLICATION CLIENT privilege can execute
--echo # SHOW SLAVE STATUS NONBLOCKING.
CREATE USER mysqltest_2@localhost;
GRANT REPLICATION CLIENT ON *.* TO 'mysqltest_2'@'localhost';
SHOW GRANTS FOR mysqltest_2@localhost;

--connect(user2,127.0.0.1,mysqltest_2,,,$SLAVE_MYPORT)
--connection user2
# SHOW SLAVE STATUS NONBLOCKING output doesn't matter for this test, only
# its successful execution.
--disable_result_log
SHOW SLAVE STATUS NONBLOCKING;
--enable_result_log

--connection slave
--disconnect user2
DROP USER 'mysqltest_2'@'localhost';

--echo #######################################################################
--echo # Stress test that executes nearly in parallel SSS NONBLOCKING and STOP
--echo # SLAVE.

--disable_query_log
--disable_result_log
--let $include_silent= 1

--let $done= 0
--let $max_seconds= 300
--let $max_iterations= 1000
--let $iteration= 1
--let $start_time= `SELECT UNIX_TIMESTAMP()`

while (!$done)
{
  --connection slave
  --send SHOW SLAVE STATUS NONBLOCKING

  --connection slave1
  # Disabling warnings to not flood the error log, otherwise it might
  # cause sporadic test failures during the 'check warnings' stage because
  # the log would be too large and the platform to slow to parse it in
  # time.
  SET global log_error_verbosity=1;
  STOP SLAVE;
  --eval SET global log_error_verbosity=$saved_log_error_verbosity

  --connection slave
  # SHOW SLAVE STATUS NONBLOCKING output doesn't matter for this test, only
  # its successful execution.
  --reap
  --source include/wait_for_slave_to_stop.inc

  # Disabling warnings to not flood the error log, otherwise it might
  # cause sporadic test failures during the 'check warnings' stage because
  # the log would be too large and the platform to slow to parse it in
  # time.
  SET global log_error_verbosity=1;
  --source include/start_slave.inc
  --eval SET global log_error_verbosity=$saved_log_error_verbosity
  --dec $max_iterations

  --inc $iteration
  if ($iteration > $max_iterations)
  {
    --let $done= 1
  }
  --let $elapsed_time= `SELECT UNIX_TIMESTAMP() - $start_time`
  if ($elapsed_time > $max_seconds)
  {
    --let $done= 1
  }
}
--let $include_silent= 0
--enable_result_log
--enable_query_log

--source include/rpl_end.inc
