# WL6402: Non blocking show slave status
#
# Add a option to "SHOW SLAVE STATUS" command that when used,
# "SHOW SLAVE STATUS NONBLOCKING" returns immediately instead of
# blocking when run locks hold by "STOP SLAVE".
#

--source include/have_debug.inc
# This test do not depends on any binlog format, so testing it with
# mixed is enough.
--source include/have_binlog_format_mixed.inc
--source include/master-slave.inc

--echo [connection slave]
--source include/sync_slave_sql_with_master.inc
SET @slave_debug_save= @@GLOBAL.DEBUG;


--echo #######################################################################
--echo # Call SHOW SLAVE STATUS NONBLOCKING while run locks are hold on
--echo # STOP SLAVE.
--source include/stop_slave.inc
SET @@GLOBAL.DEBUG = '+d,simulate_hold_run_locks_on_stop_slave';
--source include/start_slave.inc
--send STOP SLAVE

--echo [connection slave1]
--connection slave1
--let $assert_text= SHOW SLAVE STATUS NONBLOCKING must not wait for locks, if it waits Slave_SQL_Running will be "No"
--let $assert_cond= "[SHOW SLAVE STATUS NONBLOCKING, Slave_SQL_Running, 1]" = "Yes"
--source include/assert.inc

--echo [connection slave]
--connection slave
--reap
--source include/wait_for_slave_to_stop.inc
SET GLOBAL DEBUG= @slave_debug_save;


--echo #######################################################################
--echo # Hold SHOW SLAVE STATUS NONBLOCKING just before call
--echo # show_slave_status(), execute STOP SLAVE and resume SSS NONBLOCKING.
SET @@GLOBAL.DEBUG = '+d,simulate_hold_show_slave_status_nonblocking';
--source include/start_slave.inc
--send SHOW SLAVE STATUS NONBLOCKING

--echo [connection slave1]
--connection slave1
--source include/stop_slave.inc

--echo [connection slave]
--connection slave
# SHOW SLAVE STATUS NONBLOCKING output doesn't matter for this test, only
# its successful execution.
--disable_result_log
--reap
--enable_result_log

SET GLOBAL DEBUG= @slave_debug_save;
--source include/start_slave.inc


--source include/rpl_end.inc
