/*****************************************************************************

Copyright (c) 2013, Oracle and/or its affiliates. All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; version 2 of the License.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Suite 500, Boston, MA 02110-1335 USA

*****************************************************************************/

/******************************************************************//**
@file include/sync0policy.ic
Policy for mutexes.

Created 2012-08-21 Sunny Bains.
***********************************************************************/

#include "sync0mutex.h"
#include "sync0debug.h"

template <typename Mutex>
void TrackPolicy<Mutex>::print(FILE* stream) const
{
	const char*	ptr = m_cfile_name + strlen(m_cfile_name) - 1;

	while (ptr > m_cfile_name && *ptr != '/' && *ptr != '\\') {
		--ptr;
	}

	++ptr;

	fprintf(stream, "Mutex \"%s\" created at %s:%lu ",
		m_name, ptr, m_cline);
}

#ifdef UNIV_DEBUG

template <typename Mutex>
void DebugPolicy<Mutex>::init(
	const Mutex&	mutex,
	const char*	name,
	const char*	filename,
	ulint		line) UNIV_NOTHROW
{
	TrackPolicy<Mutex>::init(mutex, name, filename, line);

	m_magic_n = MUTEX_MAGIC_N;
	m_thread_id = os_thread_id_t(ULINT_UNDEFINED);

	m_latch.m_name = name;
	m_latch.m_level = sync_latch_get_level(name);

	ut_ad(m_latch.m_level != SYNC_UNKNOWN);

	m_file_name = 0;

	m_line = ULINT_UNDEFINED;
}

template <typename Mutex>
void DebugPolicy<Mutex>::enter(
	const Mutex&		mutex,
	const char*		name,
	ulint			line) UNIV_NOTHROW
{
	if (!m_track) {
		return;
	}

	ut_ad(!is_owned());
	ut_ad(m_latch.m_mutex == 0 || m_latch.m_mutex == &mutex);

	if (m_latch.m_mutex == 0) {
		m_latch.m_mutex = &mutex;
	}

	m_line = line;
	m_file_name = name;

	ut_a(m_file_name);

	/* Check latch order violation. */
	sync_check_lock(&m_latch);
}

template <typename Mutex>
void DebugPolicy<Mutex>::locked(const Mutex& mutex) UNIV_NOTHROW
{
	if (!m_track) {
		return;
	}

	ut_ad(!is_owned());
	ut_ad(m_thread_id == os_thread_id_t(ULINT_UNDEFINED));

	m_thread_id = os_thread_get_curr_id();
}

template <typename Mutex>
void DebugPolicy<Mutex>::release(const Mutex& mutex) UNIV_NOTHROW
{
	if (!m_track) {
		return;
	}

	ut_ad(is_owned());

	m_thread_id = os_thread_id_t(ULINT_UNDEFINED);

	m_file_name = NULL;
	m_line = ULINT_UNDEFINED;

	sync_check_unlock(&m_latch);
}

#endif /* UNIV_DEBUG */
